<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\BUILD\mbed-os-gg11-Si7201.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\BUILD\mbed-os-gg11-Si7201.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Feb 01 15:27:29 2019
<BR><P>
<H3>Maximum Stack Usage =        848 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__sti___8_main_cpp_pc &rArr; mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[212]">core_util_critical_section_enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[228]">mbed_assert_internal</a><BR>
 <LI><a href="#[228]">mbed_assert_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c1]">mbed_error</a><BR>
 <LI><a href="#[1c3]">EvrRtxMutexError</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c1]">mbed_error</a><BR>
 <LI><a href="#[19e]">CMU_OscillatorEnable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19e]">CMU_OscillatorEnable</a><BR>
 <LI><a href="#[2ab]">pinmap_peripheral</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c1]">mbed_error</a><BR>
 <LI><a href="#[29a]">mbed_error_vprintf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d0]">mbed_error_puts</a><BR>
 <LI><a href="#[296]">error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[299]">print_error_report</a><BR>
 <LI><a href="#[2ce]">wait_ms</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c1]">mbed_error</a><BR>
 <LI><a href="#[1c5]">EvrRtxThreadError</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c1]">mbed_error</a><BR>
 <LI><a href="#[29d]">fsync</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21e]">get_fhc(int)</a><BR>
 <LI><a href="#[283]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c1]">mbed_error</a><BR>
 <LI><a href="#[289]">isatty</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21e]">get_fhc(int)</a><BR>
 <LI><a href="#[145]">_sys_flen</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21e]">get_fhc(int)</a><BR>
 <LI><a href="#[16f]">_sys_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c1]">mbed_error</a><BR>
 <LI><a href="#[28c]">lseek</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21e]">get_fhc(int)</a><BR>
 <LI><a href="#[2ac]">pinmap_merge</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c1]">mbed_error</a><BR>
 <LI><a href="#[11]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">NMI_Handler</a><BR>
 <LI><a href="#[17]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">DebugMon_Handler</a><BR>
 <LI><a href="#[22]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ACMP0_IRQHandler</a><BR>
 <LI><a href="#[11f]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11f]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[67]">&lang;Func4&rang;</a> from .\build\serialbase.o(i.<Func4>) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[6f]">&lang;Func7&rang;</a> from .\build\arm_hal_fhss_timer.o(i.<Func7>) referenced from .\build\arm_hal_fhss_timer.o(i.__sti___22_arm_hal_fhss_timer_cpp_12d6f2f7)
 <LI><a href="#[22]">ACMP0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[51]">ACMP2_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[23]">ADC0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[52]">ADC1_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[56]">CAN0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[57]">CAN1_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[3a]">CMU_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[3d]">CRYOTIMER_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[3c]">CRYPTO0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[4e]">CSEN_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[50]">EBI_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[1a]">EMU_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[55]">ETH_IRQHandler</a> from .\build\sl_emac.o(i.ETH_IRQHandler) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[3e]">FPUEH_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[1d]">GPIO_EVEN_IRQHandler</a> from .\build\gpio_irq_api.o(i.GPIO_EVEN_IRQHandler) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[27]">GPIO_ODD_IRQHandler</a> from .\build\gpio_irq_api.o(i.GPIO_ODD_IRQHandler) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[12]">HardFault_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[25]">I2C0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[26]">I2C1_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[47]">I2C2_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[24]">IDAC0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[53]">LCD_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[1c]">LDMA_IRQHandler</a> from .\build\dma_api.o(i.LDMA_IRQHandler) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[4f]">LESENSE_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[35]">LETIMER0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[5b]">LETIMER1_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[33]">LEUART0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[34]">LEUART1_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[3b]">MSC_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[13]">MemManage_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[36]">PCNT0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[37]">PCNT1_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[38]">PCNT2_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from .\build\irq_cm4f.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[5d]">QSPI0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[39]">RTCC_IRQHandler</a> from .\build\rtcc.o(i.RTCC_IRQHandler) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[59]">RTC_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[54]">SDIO_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[1e]">SMU_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from .\build\irq_cm4f.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from .\build\irq_cm4f.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from .\build\irq_cm4f.o(.text) referenced from .\build\systimer.o(i._ZN4rtos8internal8SysTimer9setup_irqEv)
 <LI><a href="#[19]">SysTick_Handler</a> from .\build\irq_cm4f.o(.text) referenced from .\build\rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[5e]">SystemInit</a> from .\build\system_efm32gg11b.o(i.SystemInit) referenced from .\build\startup_efm32gg11.o(.text)
 <LI><a href="#[1f]">TIMER0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[28]">TIMER1_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[29]">TIMER2_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[2a]">TIMER3_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[49]">TIMER4_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[4a]">TIMER5_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[4b]">TIMER6_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[5c]">TRNG0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[2f]">UART0_RX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[30]">UART0_TX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[31]">UART1_RX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[32]">UART1_TX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[20]">USART0_RX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[21]">USART0_TX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[2b]">USART1_RX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[2c]">USART1_TX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[2d]">USART2_RX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[2e]">USART2_TX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[3f]">USART3_RX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[40]">USART3_TX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[41]">USART4_RX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[42]">USART4_TX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[4c]">USART5_RX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[4d]">USART5_TX_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[58]">USB_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[48]">VDAC0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[1b]">WDOG0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[5a]">WDOG1_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[43]">WTIMER0_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[44]">WTIMER1_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[45]">WTIMER2_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[46]">WTIMER3_IRQHandler</a> from .\build\startup_efm32gg11.o(.text) referenced from .\build\startup_efm32gg11.o(RESET)
 <LI><a href="#[f]">default_idle_hook()</a> from .\build\mbed_rtx_idle.o(i._Z17default_idle_hookv) referenced 2 times from .\build\mbed_rtx_idle.o(.data)
 <LI><a href="#[b6]">DirectSerial::seek(long, int)</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial4seekEli) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[ba]">DirectSerial::size()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial4sizeEv) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[b7]">DirectSerial::close()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial5closeEv) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[b5]">DirectSerial::write(const void*, unsigned)</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial5writeEPKvj) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[b9]">DirectSerial::isatty()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerial6isattyEv) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[65]">DirectSerial::~DirectSerial()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerialD1Ev) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[65]">DirectSerial::~DirectSerial()</a> from .\build\mbed_retarget.o(i._ZN12DirectSerialD1Ev) referenced from .\build\mbed_retarget.o(i._Z15default_consolev)
 <LI><a href="#[6e]">fhss_timeout_s::fhss_timeout_s()</a> from .\build\arm_hal_fhss_timer.o(i._ZN14fhss_timeout_sC1Ev) referenced from .\build\arm_hal_fhss_timer.o(i.__sti___22_arm_hal_fhss_timer_cpp_12d6f2f7)
 <LI><a href="#[64]">fhss_timeout_s::~fhss_timeout_s()</a> from .\build\arm_hal_fhss_timer.o(i._ZN14fhss_timeout_sD1Ev) referenced from .\build\arm_hal_fhss_timer.o(i.<Func7>)
 <LI><a href="#[be]">mbed::FileHandle::size()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv) referenced from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[be]">mbed::FileHandle::size()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[b8]">mbed::FileHandle::sync()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle4syncEv) referenced from .\build\mbed_retarget.o(.constdata__ZTV12DirectSerial)
 <LI><a href="#[b8]">mbed::FileHandle::sync()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle4syncEv) referenced from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[b8]">mbed::FileHandle::sync()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle4syncEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[bd]">mbed::FileHandle::isatty()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle6isattyEv) referenced from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[bd]">mbed::FileHandle::isatty()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle6isattyEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[bc]">mbed::FileHandle::~FileHandle__sub_object()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandleD2Ev) referenced from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[68]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[b4]">mbed::SerialBase::interrupt_handler_asynch()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase24interrupt_handler_asynchEv) referenced from .\build\serialbase.o(.constdata)
 <LI><a href="#[bf]">mbed::SerialBase::lock()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase4lockEv) referenced from .\build\serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[c0]">mbed::SerialBase::unlock()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase6unlockEv) referenced from .\build\serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[c1]">mbed::SerialBase::~SerialBase()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev) referenced from .\build\serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[6a]">mbed::TimerEvent::irq(unsigned)</a> from .\build\timerevent.o(i._ZN4mbed10TimerEvent3irqEj) referenced from .\build\timerevent.o(i._ZN4mbed10TimerEventC2EPK13ticker_data_t)
 <LI><a href="#[6a]">mbed::TimerEvent::irq(unsigned)</a> from .\build\timerevent.o(i._ZN4mbed10TimerEvent3irqEj) referenced from .\build\timerevent.o(i._ZN4mbed10TimerEventC2Ev)
 <LI><a href="#[c2]">mbed::TimerEvent::~TimerEvent__sub_object()</a> from .\build\timerevent.o(i._ZN4mbed10TimerEventD2Ev) referenced from .\build\timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[70]">mbed::Transaction&lang;mbed::SPI&rang;::Transaction()</a> from .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEEC1Ev) referenced from .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164)
 <LI><a href="#[a2]">mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()</a> from .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEED1Ev) referenced from .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj4EjED1Ev)
 <LI><a href="#[71]">mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)4, unsigned&rang;::~CircularBuffer()</a> from .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj4EjED1Ev) referenced from .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164)
 <LI><a href="#[a3]">mbed::I2C::irq_handler_asynch()</a> from .\build\i2c.o(i._ZN4mbed3I2C18irq_handler_asynchEv) referenced from .\build\i2c.o(.constdata)
 <LI><a href="#[c3]">mbed::I2C::lock()</a> from .\build\i2c.o(i._ZN4mbed3I2C4lockEv) referenced from .\build\i2c.o(.constdata__ZTVN4mbed3I2CE)
 <LI><a href="#[c4]">mbed::I2C::unlock()</a> from .\build\i2c.o(i._ZN4mbed3I2C6unlockEv) referenced from .\build\i2c.o(.constdata__ZTVN4mbed3I2CE)
 <LI><a href="#[73]">mbed::I2C::~I2C()</a> from .\build\i2c.o(i._ZN4mbed3I2CD1Ev) referenced from .\build\i2c.o(.constdata__ZTVN4mbed3I2CE)
 <LI><a href="#[73]">mbed::I2C::~I2C()</a> from .\build\i2c.o(i._ZN4mbed3I2CD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_pc)
 <LI><a href="#[6d]">mbed::Timer::~Timer()</a> from .\build\timer.o(i._ZN4mbed5TimerD1Ev) referenced from .\build\arm_hal_fhss_timer.o(i.__sti___22_arm_hal_fhss_timer_cpp_12d6f2f7)
 <LI><a href="#[c5]">mbed::Serial::lock()</a> from .\build\serial.o(i._ZN4mbed6Serial4lockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c7]">mbed::Serial::_putc(int)</a> from .\build\serial.o(i._ZN4mbed6Serial5_putcEi) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c6]">mbed::Serial::unlock()</a> from .\build\serial.o(i._ZN4mbed6Serial6unlockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[72]">mbed::Serial::~Serial()</a> from .\build\serial.o(i._ZN4mbed6SerialD1Ev) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[72]">mbed::Serial::~Serial()</a> from .\build\serial.o(i._ZN4mbed6SerialD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_pc)
 <LI><a href="#[d2]">mbed::Stream::lock()</a> from .\build\stream.o(i._ZN4mbed6Stream4lockEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[c9]">mbed::Stream::seek(long, int)</a> from .\build\stream.o(i._ZN4mbed6Stream4seekEli) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c9]">mbed::Stream::seek(long, int)</a> from .\build\stream.o(i._ZN4mbed6Stream4seekEli) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[cd]">mbed::Stream::size()</a> from .\build\stream.o(i._ZN4mbed6Stream4sizeEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[cd]">mbed::Stream::size()</a> from .\build\stream.o(i._ZN4mbed6Stream4sizeEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[cb]">mbed::Stream::sync()</a> from .\build\stream.o(i._ZN4mbed6Stream4syncEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[cb]">mbed::Stream::sync()</a> from .\build\stream.o(i._ZN4mbed6Stream4syncEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[ca]">mbed::Stream::close()</a> from .\build\stream.o(i._ZN4mbed6Stream5closeEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[ca]">mbed::Stream::close()</a> from .\build\stream.o(i._ZN4mbed6Stream5closeEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[c8]">mbed::Stream::write(const void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c8]">mbed::Stream::write(const void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[cc]">mbed::Stream::isatty()</a> from .\build\stream.o(i._ZN4mbed6Stream6isattyEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[cc]">mbed::Stream::isatty()</a> from .\build\stream.o(i._ZN4mbed6Stream6isattyEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[d3]">mbed::Stream::unlock()</a> from .\build\stream.o(i._ZN4mbed6Stream6unlockEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[d1]">mbed::Stream::~Stream__sub_object()</a> from .\build\stream.o(i._ZN4mbed6StreamD2Ev) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[d4]">mbed::Ticker::handler()</a> from .\build\ticker.o(i._ZN4mbed6Ticker7handlerEv) referenced from .\build\ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[d5]">mbed::Timeout::handler()</a> from .\build\timeout.o(i._ZN4mbed7Timeout7handlerEv) referenced from .\build\timeout.o(.constdata__ZTVN4mbed7TimeoutE)
 <LI><a href="#[d9]">void mbed::Callback&lang;void(void*)&rang;::function_call&lang;void(*)(void*)&rang;(const void*, void*)</a> from .\build\sl_emac.o(t._ZN4mbed8CallbackIFvPvEE13function_callIPS2_EEvPKvS1_) referenced from .\build\sl_emac.o(.constdata__ZZN4mbed8CallbackIFvPvEE8generateIPS2_EEvRKT_E3ops)
 <LI><a href="#[db]">void mbed::Callback&lang;void(void*)&rang;::function_dtor&lang;void(*)(void*)&rang;(void*)</a> from .\build\sl_emac.o(t._ZN4mbed8CallbackIFvPvEE13function_dtorIPS2_EEvS1_) referenced from .\build\sl_emac.o(.constdata__ZZN4mbed8CallbackIFvPvEE8generateIPS2_EEvRKT_E3ops)
 <LI><a href="#[da]">void mbed::Callback&lang;void(void*)&rang;::function_move&lang;void(*)(void*)&rang;(void*, const void*)</a> from .\build\sl_emac.o(t._ZN4mbed8CallbackIFvPvEE13function_moveIPS2_EEvS1_PKv) referenced from .\build\sl_emac.o(.constdata__ZZN4mbed8CallbackIFvPvEE8generateIPS2_EEvRKT_E3ops)
 <LI><a href="#[dc]">void mbed::Callback&lang;void(bool)&rang;::function_call&lang;void(*)(bool)&rang;(const void*, bool)</a> from .\build\lorawanstack.o(t._ZN4mbed8CallbackIFvbEE13function_callIPS1_EEvPKvb) referenced from .\build\lorawanstack.o(.constdata__ZZN4mbed8CallbackIFvbEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[de]">void mbed::Callback&lang;void(bool)&rang;::function_dtor&lang;void(*)(bool)&rang;(void*)</a> from .\build\lorawanstack.o(t._ZN4mbed8CallbackIFvbEE13function_dtorIPS1_EEvPv) referenced from .\build\lorawanstack.o(.constdata__ZZN4mbed8CallbackIFvbEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[dd]">void mbed::Callback&lang;void(bool)&rang;::function_move&lang;void(*)(bool)&rang;(void*, const void*)</a> from .\build\lorawanstack.o(t._ZN4mbed8CallbackIFvbEE13function_moveIPS1_EEvPvPKv) referenced from .\build\lorawanstack.o(.constdata__ZZN4mbed8CallbackIFvbEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[df]">void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)</a> from .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEE13function_callIPS1_EEvPKvi) referenced from .\build\eventqueue.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[e1]">void mbed::Callback&lang;void(int)&rang;::function_dtor&lang;void(*)(int)&rang;(void*)</a> from .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEE13function_dtorIPS1_EEvPv) referenced from .\build\eventqueue.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[e0]">void mbed::Callback&lang;void(int)&rang;::function_move&lang;void(*)(int)&rang;(void*, const void*)</a> from .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv) referenced from .\build\eventqueue.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[e2]">void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</a> from .\build\arm_hal_fhss_timer.o(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv) referenced from .\build\arm_hal_fhss_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[e4]">void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</a> from .\build\arm_hal_fhss_timer.o(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv) referenced from .\build\arm_hal_fhss_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[e3]">void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</a> from .\build\arm_hal_fhss_timer.o(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv) referenced from .\build\arm_hal_fhss_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[69]">mbed::Callback&lang;void()&rang;::~Callback()</a> from .\build\arm_hal_fhss_timer.o(t._ZN4mbed8CallbackIFvvEED1Ev) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev)
 <LI><a href="#[d6]">mbed::FileBase::~FileBase()</a> from .\build\filebase.o(i._ZN4mbed8FileBaseD1Ev) referenced from .\build\filebase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[d7]">mbed::FileLike::~FileLike__sub_object()</a> from .\build\stream.o(i._ZN4mbed8FileLikeD2Ev) referenced from .\build\stream.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[d8]">rtos::internal::SysTimer::handler()</a> from .\build\systimer.o(i._ZN4rtos8internal8SysTimer7handlerEv) referenced from .\build\systimer.o(.constdata__ZTVN4rtos8internal8SysTimerE)
 <LI><a href="#[66]">CThunk&lang;mbed::SerialBase&rang;::trampoline(CThunkBase*)</a> from .\build\serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEP10CThunkBase) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[6b]">CThunk&lang;mbed::I2C&rang;::trampoline(CThunkBase*)</a> from .\build\i2c.o(t._ZN6CThunkIN4mbed3I2CEE10trampolineEP10CThunkBase) referenced from .\build\i2c.o(i._ZN4mbed3I2CC1E7PinNameS1_)
 <LI><a href="#[6c]">SL_EMAC::~SL_EMAC()</a> from .\build\sl_emac.o(i._ZN7SL_EMACD1Ev) referenced from .\build\sl_emac.o(i._ZN7SL_EMAC12get_instanceEv)
 <LI><a href="#[cf]">thunk{-196} to mbed::Serial::lock()</a> from .\build\serial.o(i._ZThn196_N4mbed6Serial4lockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[ce]">thunk{-196} to mbed::Serial::_putc(int)</a> from .\build\serial.o(i._ZThn196_N4mbed6Serial5_putcEi) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[d0]">thunk{-196} to mbed::Serial::unlock()</a> from .\build\serial.o(i._ZThn196_N4mbed6Serial6unlockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[bb]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 15 times from .\build\sl_emac.o(.constdata__ZTV4EMAC)
 <LI><a href="#[bb]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 4 times from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[bb]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced from .\build\timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[bb]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 2 times from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[bb]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 4 times from .\build\stream.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[e8]">__main</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main) referenced from .\build\startup_efm32gg11.o(.text)
 <LI><a href="#[e5]">__sti___22_arm_hal_fhss_timer_cpp_12d6f2f7</a> from .\build\arm_hal_fhss_timer.o(i.__sti___22_arm_hal_fhss_timer_cpp_12d6f2f7) referenced from .\build\arm_hal_fhss_timer.o(.init_array)
 <LI><a href="#[e6]">__sti___7_SPI_cpp_ab1f1164</a> from .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164) referenced from .\build\spi.o(.init_array)
 <LI><a href="#[e7]">__sti___8_main_cpp_pc</a> from .\build\main.o(i.__sti___8_main_cpp_pc) referenced from .\build\main.o(.init_array)
 <LI><a href="#[63]">_fputc$unlocked</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fputc.o)(i.fputc) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_file_locked.o)(.text)
 <LI><a href="#[60]">_get_lc_ctype</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text)
 <LI><a href="#[62]">_printf_input_char</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text)
 <LI><a href="#[61]">_snputc</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text)
 <LI><a href="#[9b]">leuart0_irq</a> from .\build\serial_api.o(i.leuart0_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[9c]">leuart1_irq</a> from .\build\serial_api.o(i.leuart1_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[a7]">lp_ticker_clear_interrupt</a> from .\build\rtcc.o(i.lp_ticker_clear_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[a6]">lp_ticker_disable_interrupt</a> from .\build\rtcc.o(i.lp_ticker_disable_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[a9]">lp_ticker_fire_interrupt</a> from .\build\rtcc.o(i.lp_ticker_fire_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[aa]">lp_ticker_free</a> from .\build\rtcc.o(i.lp_ticker_free) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[ab]">lp_ticker_get_info</a> from .\build\rtcc.o(i.lp_ticker_get_info) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[a4]">lp_ticker_init</a> from .\build\rtcc.o(i.lp_ticker_init) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[a5]">lp_ticker_read</a> from .\build\rtcc.o(i.lp_ticker_read) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[a8]">lp_ticker_set_interrupt</a> from .\build\rtcc.o(i.lp_ticker_set_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.constdata)
 <LI><a href="#[74]">mbed_start</a> from .\build\mbed_boot.o(i.mbed_start) referenced from .\build\mbed_rtos_rtx.o(i.mbed_rtos_start)
 <LI><a href="#[82]">osRtxIdleThread</a> from .\build\mbed_rtx_handlers.o(i.osRtxIdleThread) referenced from .\build\rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[9d]">osRtxMessageQueuePostProcess</a> from .\build\rtx_msgqueue.o(i.osRtxMessageQueuePostProcess) referenced from .\build\rtx_msgqueue.o(i.svcRtxMessageQueueNew)
 <LI><a href="#[9e]">osRtxSemaphorePostProcess</a> from .\build\rtx_semaphore.o(i.osRtxSemaphorePostProcess) referenced from .\build\rtx_semaphore.o(i.svcRtxSemaphoreNew)
 <LI><a href="#[a0]">osRtxThreadPostProcess</a> from .\build\rtx_thread.o(i.osRtxThreadPostProcess) referenced from .\build\rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[83]">osRtxTimerThread</a> from .\build\rtx_timer.o(i.osRtxTimerThread) referenced from .\build\rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[84]">osRtxTimerTick</a> from .\build\rtx_timer.o(i.osRtxTimerTick) referenced from .\build\rtx_timer.o(i.osRtxTimerThread)
 <LI><a href="#[9f]">osThreadExit</a> from .\build\rtx_thread.o(i.osThreadExit) referenced from .\build\rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[75]">svcRtxDelay</a> from .\build\rtx_delay.o(i.svcRtxDelay) referenced from .\build\rtx_delay.o(i.osDelay)
 <LI><a href="#[76]">svcRtxKernelGetState</a> from .\build\rtx_kernel.o(i.svcRtxKernelGetState) referenced from .\build\rtx_kernel.o(i.osKernelGetState)
 <LI><a href="#[77]">svcRtxKernelInitialize</a> from .\build\rtx_kernel.o(i.svcRtxKernelInitialize) referenced from .\build\rtx_kernel.o(i.osKernelInitialize)
 <LI><a href="#[78]">svcRtxKernelResume</a> from .\build\rtx_kernel.o(i.svcRtxKernelResume) referenced from .\build\rtx_kernel.o(i.osKernelResume)
 <LI><a href="#[79]">svcRtxKernelStart</a> from .\build\rtx_kernel.o(i.svcRtxKernelStart) referenced from .\build\rtx_kernel.o(i.osKernelStart)
 <LI><a href="#[7a]">svcRtxKernelSuspend</a> from .\build\rtx_kernel.o(i.svcRtxKernelSuspend) referenced from .\build\rtx_kernel.o(i.osKernelSuspend)
 <LI><a href="#[7b]">svcRtxMessageQueueGet</a> from .\build\rtx_msgqueue.o(i.svcRtxMessageQueueGet) referenced from .\build\rtx_msgqueue.o(i.osMessageQueueGet)
 <LI><a href="#[7c]">svcRtxMessageQueueNew</a> from .\build\rtx_msgqueue.o(i.svcRtxMessageQueueNew) referenced from .\build\rtx_msgqueue.o(i.osMessageQueueNew)
 <LI><a href="#[7d]">svcRtxMessageQueuePut</a> from .\build\rtx_msgqueue.o(i.svcRtxMessageQueuePut) referenced from .\build\rtx_msgqueue.o(i.osMessageQueuePut)
 <LI><a href="#[7e]">svcRtxMutexAcquire</a> from .\build\rtx_mutex.o(i.svcRtxMutexAcquire) referenced from .\build\rtx_mutex.o(i.osMutexAcquire)
 <LI><a href="#[7f]">svcRtxMutexDelete</a> from .\build\rtx_mutex.o(i.svcRtxMutexDelete) referenced from .\build\rtx_mutex.o(i.osMutexDelete)
 <LI><a href="#[80]">svcRtxMutexNew</a> from .\build\rtx_mutex.o(i.svcRtxMutexNew) referenced from .\build\rtx_mutex.o(i.osMutexNew)
 <LI><a href="#[81]">svcRtxMutexRelease</a> from .\build\rtx_mutex.o(i.svcRtxMutexRelease) referenced from .\build\rtx_mutex.o(i.osMutexRelease)
 <LI><a href="#[85]">svcRtxSemaphoreDelete</a> from .\build\rtx_semaphore.o(i.svcRtxSemaphoreDelete) referenced from .\build\rtx_semaphore.o(i.osSemaphoreDelete)
 <LI><a href="#[86]">svcRtxSemaphoreNew</a> from .\build\rtx_semaphore.o(i.svcRtxSemaphoreNew) referenced from .\build\rtx_semaphore.o(i.osSemaphoreNew)
 <LI><a href="#[87]">svcRtxThreadExit</a> from .\build\rtx_thread.o(i.svcRtxThreadExit) referenced from .\build\rtx_thread.o(i.osThreadExit)
 <LI><a href="#[88]">svcRtxThreadFlagsSet</a> from .\build\rtx_thread.o(i.svcRtxThreadFlagsSet) referenced from .\build\rtx_thread.o(i.osThreadFlagsSet)
 <LI><a href="#[89]">svcRtxThreadGetId</a> from .\build\rtx_thread.o(i.svcRtxThreadGetId) referenced from .\build\rtx_thread.o(i.osThreadGetId)
 <LI><a href="#[8a]">svcRtxThreadNew</a> from .\build\rtx_thread.o(i.svcRtxThreadNew) referenced from .\build\rtx_thread.o(i.osThreadNew)
 <LI><a href="#[e]">ticker_irq_handler</a> from .\build\mbed_ticker_api.o(i.ticker_irq_handler) referenced 4 times from .\build\mbed_lp_ticker_api.o(.data)
 <LI><a href="#[8b]">uart0_rx_irq</a> from .\build\serial_api.o(i.uart0_rx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[8c]">uart0_tx_irq</a> from .\build\serial_api.o(i.uart0_tx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[8d]">uart1_rx_irq</a> from .\build\serial_api.o(i.uart1_rx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[8e]">uart1_tx_irq</a> from .\build\serial_api.o(i.uart1_tx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[af]">us_ticker_clear_interrupt</a> from .\build\us_ticker.o(i.us_ticker_clear_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[ae]">us_ticker_disable_interrupt</a> from .\build\us_ticker.o(i.us_ticker_disable_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[b1]">us_ticker_fire_interrupt</a> from .\build\us_ticker.o(i.us_ticker_fire_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[b2]">us_ticker_free</a> from .\build\us_ticker.o(i.us_ticker_free) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[b3]">us_ticker_get_info</a> from .\build\us_ticker.o(i.us_ticker_get_info) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[ac]">us_ticker_init</a> from .\build\us_ticker.o(i.us_ticker_init) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[a1]">us_ticker_irq_handler</a> from .\build\mbed_us_ticker_api.o(i.us_ticker_irq_handler) referenced from .\build\us_ticker.o(i.us_ticker_init)
 <LI><a href="#[ad]">us_ticker_read</a> from .\build\us_ticker.o(i.us_ticker_read) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[b0]">us_ticker_set_interrupt</a> from .\build\us_ticker.o(i.us_ticker_set_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[8f]">usart0_rx_irq</a> from .\build\serial_api.o(i.usart0_rx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[90]">usart0_tx_irq</a> from .\build\serial_api.o(i.usart0_tx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[91]">usart1_rx_irq</a> from .\build\serial_api.o(i.usart1_rx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[92]">usart1_tx_irq</a> from .\build\serial_api.o(i.usart1_tx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[93]">usart2_rx_irq</a> from .\build\serial_api.o(i.usart2_rx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[94]">usart2_tx_irq</a> from .\build\serial_api.o(i.usart2_tx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[95]">usart3_rx_irq</a> from .\build\serial_api.o(i.usart3_rx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[96]">usart3_tx_irq</a> from .\build\serial_api.o(i.usart3_tx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[97]">usart4_rx_irq</a> from .\build\serial_api.o(i.usart4_rx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[98]">usart4_tx_irq</a> from .\build\serial_api.o(i.usart4_tx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[99]">usart5_rx_irq</a> from .\build\serial_api.o(i.usart5_rx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
 <LI><a href="#[9a]">usart5_tx_irq</a> from .\build\serial_api.o(i.usart5_tx_irq) referenced from .\build\serial_api.o(i.serial_preinit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[e8]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; mbed_init &rArr; mbed_rtos_init &rArr; osKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ee]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f0]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[34e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[34f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[350]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__dczerorl2.o)(!!dczerorl2), UNUSED)

<P><STRONG><a name="[351]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__dczerorl2.o)(!!dczerorl2), UNUSED)

<P><STRONG><a name="[352]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter_zi.o)(!!handler_zi), UNUSED)

<P><STRONG><a name="[f1]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_n.o)(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[141]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_percent.o)(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[f3]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_p.o)(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[f5]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_f.o)(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f7]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_e.o)(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f8]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_g.o)(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f9]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_a.o)(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[353]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_ll.o)(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[fb]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_i.o)(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fd]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_d.o)(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fe]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_u.o)(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ff]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_o.o)(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[101]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_x.o)(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[103]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lli.o)(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[105]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lld.o)(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[106]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llu.o)(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[107]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llo.o)(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[109]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llx.o)(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[354]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_l.o)(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[10b]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_c.o)(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[10d]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_s.o)(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[10f]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lc.o)(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[111]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_ls.o)(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[355]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_percent_end.o)(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[2dc]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit.o)(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_toolchain_init
</UL>

<P><STRONG><a name="[113]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[115]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[356]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[357]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[117]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[358]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[359]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[35a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[119]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[35b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[35c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[35d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[35e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[35f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[360]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[361]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[362]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[363]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[364]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[365]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[366]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[367]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[368]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[369]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[36a]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[36b]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[36c]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[36d]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[36e]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[36f]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[370]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f4]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[371]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[372]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f6]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[373]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[374]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[2f3]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[11f]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>

<P><STRONG><a name="[1e7]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[375]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[376]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[377]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[378]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>

<P><STRONG><a name="[379]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[37a]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[37b]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[37c]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[37d]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[120]"></a>__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_link_put
</UL>

<P><STRONG><a name="[37e]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[37f]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[380]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[381]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[382]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[383]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[384]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[385]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[386]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[387]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>

<P><STRONG><a name="[388]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[121]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put
</UL>

<P><STRONG><a name="[389]"></a>__asm___12_rtx_system_c_024f2f18__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[38a]"></a>__asm___12_rtx_system_c_024f2f18__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[38b]"></a>__asm___12_rtx_system_c_024f2f18__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[38c]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[38d]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[38e]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c0]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>

<P><STRONG><a name="[2be]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[38f]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[390]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[2bd]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[391]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[122]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_system.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>

<P><STRONG><a name="[392]"></a>__asm___12_rtx_thread_c_add96be5__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__asm___12_rtx_thread_c_add96be5__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
</UL>

<P><STRONG><a name="[393]"></a>__asm___12_rtx_thread_c_add96be5__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[1f8]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[1f9]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[394]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[395]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[396]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[397]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[398]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[399]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[39a]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[123]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>

<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; Fault_Handler &rArr; mbed_fault_handler &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[39b]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(maybetermalloc2.o)(.emb_text), UNUSED)

<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = MemManage_Handler &rArr; Fault_Handler &rArr; mbed_fault_handler &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = BusFault_Handler &rArr; Fault_Handler &rArr; mbed_fault_handler &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>Fault_Handler</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = Fault_Handler &rArr; mbed_fault_handler &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, .\build\irq_cm4f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 3]<UL><LI> rtx_kernel.o(i.svcRtxKernelStart)
<LI> systimer.o(i._ZN4rtos8internal8SysTimer9setup_irqEv)
<LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CRYOTIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CRYPTO0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CSEN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>EBI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FPUEH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IDAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>LESENSE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>LETIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>LETIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>LEUART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>LEUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>MSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PCNT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PCNT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PCNT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TRNG0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART0_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>UART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USART0_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USART2_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USART2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART3_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART4_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART4_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART5_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART5_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>VDAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WDOG0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>WTIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>WTIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>WTIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>WTIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[39c]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\startup_efm32gg11.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osThreadGetId &rArr; svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_open_errors(int, unsigned)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unbind_from_fd(int, mbed::FileHandle*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[39d]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_alloc_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[12e]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_alloc_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[130]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_free_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[131]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_free_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[271]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick_round_up
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::resume()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::schedule_tick(unsigned)
</UL>

<P><STRONG><a name="[39f]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text), UNUSED)

<P><STRONG><a name="[293]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llshl.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick_round_up
</UL>

<P><STRONG><a name="[3a0]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llshl.o)(.text), UNUSED)

<P><STRONG><a name="[347]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llushr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
</UL>

<P><STRONG><a name="[3a1]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llushr.o)(.text), UNUSED)

<P><STRONG><a name="[132]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
</UL>

<P><STRONG><a name="[135]"></a>__c89vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(c89vfprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[137]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__2printf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_index
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_clock
</UL>

<P><STRONG><a name="[139]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[13a]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[138]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_str.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[fc]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[13e]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[102]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[10a]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[f4]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[13f]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__printf_flags_ss_wp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[142]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fseek.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fseek &rArr; _sys_istty &rArr; isatty &rArr;  get_fhc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
</UL>

<P><STRONG><a name="[3a2]"></a>_fseek$unlocked</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fseek.o)(.text), UNUSED)

<P><STRONG><a name="[147]"></a>setbuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(setbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setbuf &rArr; setvbuf &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
</UL>

<P><STRONG><a name="[3a3]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fclose.o)(.text), UNUSED)

<P><STRONG><a name="[149]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fclose.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _sys_close &rArr; close &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[14d]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fclose_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _sys_close &rArr; close &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>

<P><STRONG><a name="[14e]"></a>fseek</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fseek_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fseek &rArr; _fseek &rArr; _sys_istty &rArr; isatty &rArr;  get_fhc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[14f]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_seek &rArr; lseek &rArr;  get_fhc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[150]"></a>fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_seek &rArr; lseek &rArr;  get_fhc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[153]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[154]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
</UL>

<P><STRONG><a name="[26b]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strspn.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[264]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(memcmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[263]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strlen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
</UL>

<P><STRONG><a name="[2b7]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[155]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3a4]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[3a5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL_EMAC::SL_EMAC()
</UL>

<P><STRONG><a name="[157]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[3a8]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[3a9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[158]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[28a]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strcmpv7m.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[3ab]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_aeabi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(aeabi_vec_dtor_noexceptions.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func7&rang;
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)4, unsigned&rang;::~CircularBuffer()
</UL>

<P><STRONG><a name="[3ac]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libspace.o)(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libspace.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[12f]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_heap_descriptor_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[118]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_locale_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3ad]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[15b]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[116]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[15d]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_init_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_init_mt.o)(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[13c]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[13d]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_intcommon.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[f2]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_charcount.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[3af]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text), UNUSED)

<P><STRONG><a name="[164]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[133]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[134]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sputc.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[61]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[167]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[10c]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[10e]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[168]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wctomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[104]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_longlong_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[16a]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[100]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[108]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[16b]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[2a0]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[3b0]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text), UNUSED)

<P><STRONG><a name="[144]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(ftell.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osThreadGetId &rArr; svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[3b1]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(ftell.o)(.text), UNUSED)

<P><STRONG><a name="[146]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[16d]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _writebuf &rArr; _sys_seek &rArr; lseek &rArr;  get_fhc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[14a]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_seek &rArr; lseek &rArr;  get_fhc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[16c]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[148]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(setvbuf_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[11d]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(initio_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[171]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(initio_locked.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[172]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_pvfn_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[17d]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(sys_wrch.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[177]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(sys_exit.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[15a]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_extend_mt.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[163]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lludiv10.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[175]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_hex.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[166]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_infnan.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[136]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_file_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>

<P><STRONG><a name="[176]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[110]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[112]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[15f]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(bigflt0.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[169]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_wcrtomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[174]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_exit.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[170]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtred_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[15c]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtmem_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[173]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_pvfn_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[3b2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(indicate_semi.o)(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(term_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[17a]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_general.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[178]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtred_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[179]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtmem_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[17c]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_final_mt.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[160]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17f]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[17e]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[180]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[181]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[161]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[162]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[182]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[185]"></a>CMU_ClockDivSet</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.CMU_ClockDivSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CMU_ClockDivSet &rArr; CMU_ClockPrescSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockPrescSet
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_leuart_baud
</UL>

<P><STRONG><a name="[187]"></a>CMU_ClockEnable</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, .\build\em_cmu.o(i.CMU_ClockEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CMU_ClockEnable &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncReg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_free
</UL>

<P><STRONG><a name="[18a]"></a>CMU_ClockFreqGet</STRONG> (Thumb, 472 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.CMU_ClockFreqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbRateClkGet
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdioRefClkGet
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspiRefClkGet
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxClkGet
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcAsyncClkGet
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Log2ToDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockPrescSet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateGet
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusFreqSet
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateAsyncSet
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>CMU_ClockPrescSet</STRONG> (Thumb, 702 bytes, Stack size 24 bytes, .\build\em_cmu.o(i.CMU_ClockPrescSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CMU_ClockPrescSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_UpdateWaitStates
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncReg
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHfLeConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleGet
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PrescToLog2
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
</UL>

<P><STRONG><a name="[1a1]"></a>CMU_ClockSelectGet</STRONG> (Thumb, 490 bytes, Stack size 8 bytes, .\build\em_cmu.o(i.CMU_ClockSelectGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMU_ClockSelectGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFXOInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbRateClkGet
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdioRefClkGet
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspiRefClkGet
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcAsyncClkGet
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[19a]"></a>CMU_ClockSelectSet</STRONG> (Thumb, 942 bytes, Stack size 48 bytes, .\build\em_cmu.o(i.CMU_ClockSelectSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CMU_ClockSelectSet &rArr; EMU_VScaleEM01ByClock &rArr; EMU_VScaleEM01 &rArr; CMU_UpdateWaitStates &rArr; setRamWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockGet
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleEM01ByClock
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_UpdateWaitStates
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandGet
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHfLeConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleWait
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleGet
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_leuart_baud
</UL>

<P><STRONG><a name="[19c]"></a>CMU_HFRCOBandGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\em_cmu.o(i.CMU_HFRCOBandGet))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[1a0]"></a>CMU_HFXOInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.CMU_HFXOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CMU_HFXOInit &rArr; CMU_OscillatorEnable &rArr;  CMU_OscillatorEnable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockGet
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[19e]"></a>CMU_OscillatorEnable</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, .\build\em_cmu.o(i.CMU_OscillatorEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = CMU_OscillatorEnable &rArr;  CMU_OscillatorEnable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningWait
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningSet
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningGet
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFXOInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[1a4]"></a>CMU_OscillatorTuningGet</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, .\build\em_cmu.o(i.CMU_OscillatorTuningGet))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
</UL>

<P><STRONG><a name="[1a5]"></a>CMU_OscillatorTuningSet</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.CMU_OscillatorTuningSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CMU_OscillatorTuningSet &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
</UL>

<P><STRONG><a name="[1a3]"></a>CMU_OscillatorTuningWait</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, .\build\em_cmu.o(i.CMU_OscillatorTuningWait))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
</UL>

<P><STRONG><a name="[198]"></a>CMU_UpdateWaitStates</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.CMU_UpdateWaitStates))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CMU_UpdateWaitStates &rArr; setRamWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRamWaitState
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBusWaitState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockPrescSet
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleEM01
</UL>

<P><STRONG><a name="[1a9]"></a>CORE_EnterAtomic</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\em_core.o(i.CORE_EnterAtomic))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CORE_EnterAtomic
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDMA_StopTransfer
</UL>

<P><STRONG><a name="[1dc]"></a>CORE_ExitAtomic</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\em_core.o(i.CORE_ExitAtomic))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDMA_StopTransfer
</UL>

<P><STRONG><a name="[1ab]"></a>EMU_DCDCInit</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, .\build\em_emu.o(i.EMU_DCDCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = EMU_DCDCInit &rArr; EMU_DCDCOutputVoltageSet &rArr; lpGetDevinfoVrefLowHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCOutputVoltageSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCOptimizeSlice
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCModeSet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userCurrentLimitsSet
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdcValidatedConfigSet
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdcConstCalibrationLoad
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compCtrlSet
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[1b4]"></a>EMU_DCDCLnRcoBandSet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\em_emu.o(i.EMU_DCDCLnRcoBandSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EMU_DCDCLnRcoBandSet &rArr; EMU_DCDCOptimizeSlice &rArr; currentLimitersUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCOptimizeSlice
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdcValidatedConfigSet
</UL>

<P><STRONG><a name="[1b2]"></a>EMU_DCDCModeSet</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, .\build\em_emu.o(i.EMU_DCDCModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EMU_DCDCModeSet &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_IntClear
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCInit
</UL>

<P><STRONG><a name="[1af]"></a>EMU_DCDCOptimizeSlice</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, .\build\em_emu.o(i.EMU_DCDCOptimizeSlice))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EMU_DCDCOptimizeSlice &rArr; currentLimitersUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentLimitersUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCLnRcoBandSet
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCInit
</UL>

<P><STRONG><a name="[1b1]"></a>EMU_DCDCOutputVoltageSet</STRONG> (Thumb, 476 bytes, Stack size 80 bytes, .\build\em_emu.o(i.EMU_DCDCOutputVoltageSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = EMU_DCDCOutputVoltageSet &rArr; lpGetDevinfoVrefLowHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpGetDevinfoVrefLowHigh
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpCmpHystCalibrationLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCInit
</UL>

<P><STRONG><a name="[1ba]"></a>EMU_VScaleEM01</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, .\build\em_emu.o(i.EMU_VScaleEM01))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EMU_VScaleEM01 &rArr; CMU_UpdateWaitStates &rArr; setRamWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_UpdateWaitStates
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vScaleEM01Cmd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleWait
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleEM01ByClock
</UL>

<P><STRONG><a name="[19d]"></a>EMU_VScaleEM01ByClock</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, .\build\em_emu.o(i.EMU_VScaleEM01ByClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EMU_VScaleEM01ByClock &rArr; EMU_VScaleEM01 &rArr; CMU_UpdateWaitStates &rArr; setRamWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleEM01
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[55]"></a>ETH_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, .\build\sl_emac.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = ETH_IRQHandler &rArr; SL_EMAC::get_instance() &rArr; SL_EMAC::SL_EMAC() &rArr; rtos::Semaphore::Semaphore(int, unsigned short) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL_EMAC::get_instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>EvrRtxKernelError</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSuspend
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelResume
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelSuspend
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[1c2]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxMessageQueueError))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1c3]"></a>EvrRtxMutexError</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxMutexError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[1c4]"></a>EvrRtxSemaphoreError</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxSemaphoreError))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = EvrRtxSemaphoreError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
</UL>

<P><STRONG><a name="[1c5]"></a>EvrRtxThreadError</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = EvrRtxThreadError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[1c6]"></a>EvrRtxThreadExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(i.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EvrRtxThreadExit &rArr; osThreadGetId &rArr; svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[1d]"></a>GPIO_EVEN_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\gpio_irq_api.o(i.GPIO_EVEN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_EVEN_IRQHandler &rArr; GPIOINT_IRQDispatcher &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntGetEnabled
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntClear
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOINT_IRQDispatcher
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>GPIO_ODD_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\gpio_irq_api.o(i.GPIO_ODD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_ODD_IRQHandler &rArr; GPIOINT_IRQDispatcher &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntGetEnabled
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntClear
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOINT_IRQDispatcher
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[1cd]"></a>GPIO_PinModeSet</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, .\build\em_gpio.o(i.GPIO_PinModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>

<P><STRONG><a name="[1d2]"></a>I2C_BusFreqSet</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, .\build\em_i2c.o(i.I2C_BusFreqSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>

<P><STRONG><a name="[1d3]"></a>I2C_Enable</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\em_i2c.o(i.I2C_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_Enable &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
</UL>

<P><STRONG><a name="[1d5]"></a>I2C_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\em_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusFreqSet
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[2af]"></a>I2C_Transfer</STRONG> (Thumb, 714 bytes, Stack size 24 bytes, .\build\em_i2c.o(i.I2C_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_irq_handler_asynch
</UL>

<P><STRONG><a name="[1c]"></a>LDMA_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, .\build\dma_api.o(i.LDMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LDMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[1da]"></a>LDMA_StopTransfer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\em_ldma.o(i.LDMA_StopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LDMA_StopTransfer &rArr; CORE_EnterAtomic
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_ExitAtomic
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_EnterAtomic
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegMaskedClear
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
</UL>

<P><STRONG><a name="[1de]"></a>LEUART_BaudrateCalc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\em_leuart.o(i.LEUART_BaudrateCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_BaudrateCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateGet
</UL>

<P><STRONG><a name="[1dd]"></a>LEUART_BaudrateGet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\em_leuart.o(i.LEUART_BaudrateGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEUART_BaudrateGet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_unblock_sleep
</UL>

<P><STRONG><a name="[1df]"></a>LEUART_BaudrateSet</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, .\build\em_leuart.o(i.LEUART_BaudrateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_leuart_baud
</UL>

<P><STRONG><a name="[1e1]"></a>LEUART_Enable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\em_leuart.o(i.LEUART_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_enable
</UL>

<P><STRONG><a name="[1e3]"></a>LEUART_FreezeEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\em_leuart.o(i.LEUART_FreezeEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
</UL>

<P><STRONG><a name="[1e2]"></a>LEUART_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\em_leuart.o(i.LEUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LEUART_Init &rArr; LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_FreezeEnable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1e4]"></a>LEUART_Tx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\em_leuart.o(i.LEUART_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
</UL>

<P><STRONG><a name="[30c]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(i.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[1d7]"></a>OS_Tick_Disable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(i.OS_Tick_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OS_Tick_Disable &rArr; rtos::internal::SysTimer::cancel_tick() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::cancel_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelBlock
</UL>

<P><STRONG><a name="[1d9]"></a>OS_Tick_Enable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(i.OS_Tick_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OS_Tick_Enable &rArr; rtos::internal::SysTimer::SysTimer() &rArr; mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*) &rArr; ticker_set_handler &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::SysTimer()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::setup_irq()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::schedule_tick(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelUnblock
</UL>

<P><STRONG><a name="[343]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(i.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[274]"></a>OS_Tick_Setup</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, .\build\os_systick.o(i.OS_Tick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Tick_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::setup_irq()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[317]"></a>RMU_ResetControl</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, .\build\em_rmu.o(i.RMU_ResetControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RMU_ResetControl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[2cb]"></a>RTCC_ChannelInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, .\build\em_rtcc.o(i.RTCC_ChannelInit))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
</UL>

<P><STRONG><a name="[319]"></a>RTCC_Enable</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, .\build\em_rtcc.o(i.RTCC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTCC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[39]"></a>RTCC_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\rtcc.o(i.RTCC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTCC_IRQHandler &rArr; lp_ticker_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(RESET)
</UL>
<P><STRONG><a name="[318]"></a>RTCC_Init</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, .\build\em_rtcc.o(i.RTCC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[1ef]"></a>RTCC_Reset</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, .\build\em_rtcc.o(i.RTCC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTCC_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_StatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[1f0]"></a>RTCC_StatusClear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\em_rtcc.o(i.RTCC_StatusClear))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_Reset
</UL>

<P><STRONG><a name="[196]"></a>SystemCoreClockGet</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, .\build\system_efm32gg11b.o(i.SystemCoreClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockPrescSet
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockSet
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockSet
</UL>

<P><STRONG><a name="[18b]"></a>SystemHFClockGet</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, .\build\system_efm32gg11b.o(i.SystemHFClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleEM01ByClock
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfSrcClkGet
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleEM01
</UL>

<P><STRONG><a name="[19b]"></a>SystemHFXOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\system_efm32gg11b.o(i.SystemHFXOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFXOInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbRateClkGet
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdioRefClkGet
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspiRefClkGet
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcAsyncClkGet
</UL>

<P><STRONG><a name="[1f3]"></a>SystemHFXOClockSet</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\system_efm32gg11b.o(i.SystemHFXOClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemHFXOClockSet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[5e]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\system_efm32gg11b.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32gg11.o(.text)
</UL>
<P><STRONG><a name="[2c4]"></a>SystemLFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\system_efm32gg11b.o(i.SystemLFRCOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbRateClkGet
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[2c5]"></a>SystemLFXOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\system_efm32gg11b.o(i.SystemLFXOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbRateClkGet
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[1f4]"></a>SystemLFXOClockSet</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\system_efm32gg11b.o(i.SystemLFXOClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemLFXOClockSet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[29f]"></a>SystemMaxCoreClockGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\system_efm32gg11b.o(i.SystemMaxCoreClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
</UL>

<P><STRONG><a name="[2c6]"></a>SystemULFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\system_efm32gg11b.o(i.SystemULFRCOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
</UL>

<P><STRONG><a name="[1f5]"></a>TIMER_InitCC</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, .\build\em_timer.o(i.TIMER_InitCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_InitCC
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Valid
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[1fc]"></a>USART_BaudrateAsyncSet</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, .\build\em_usart.o(i.USART_BaudrateAsyncSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[31d]"></a>USART_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\em_usart.o(i.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_enable
</UL>

<P><STRONG><a name="[1fd]"></a>USART_InitAsync</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, .\build\em_usart.o(i.USART_InitAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Reset
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateAsyncSet
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1fe]"></a>USART_Reset</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, .\build\em_usart.o(i.USART_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
</UL>

<P><STRONG><a name="[333]"></a>USART_Tx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\em_usart.o(i.USART_Tx))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
</UL>

<P><STRONG><a name="[1ff]"></a>readSensor()</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, .\build\main.o(i._Z10readSensorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = readSensor() &rArr; mbed::I2C::write(int, const char*, int, bool) &rArr; mbed::I2C::aquire() &rArr; i2c_frequency &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[235]"></a>CThunkBase::cthunk_free(void(*)())</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\cthunkbase.o(i._ZN10CThunkBase11cthunk_freeEPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CThunkBase::cthunk_free(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::~I2C()
</UL>

<P><STRONG><a name="[b6]"></a>DirectSerial::seek(long, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial4seekEli))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[ba]"></a>DirectSerial::size()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial4sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[b7]"></a>DirectSerial::close()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial5closeEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[b5]"></a>DirectSerial::write(const void*, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DirectSerial::write(const void*, unsigned) &rArr; serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[b9]"></a>DirectSerial::isatty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerial6isattyEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[20a]"></a>DirectSerial::DirectSerial(PinName, PinName, int)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerialC1E7PinNameS0_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
</UL>

<P><STRONG><a name="[3b5]"></a>DirectSerial::DirectSerial__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerialC1E7PinNameS0_i), UNUSED)

<P><STRONG><a name="[65]"></a>DirectSerial::~DirectSerial()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DirectSerial::~DirectSerial()
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mbed_retarget.o(i._Z15default_consolev)
<LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[3b6]"></a>DirectSerial::~DirectSerial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZN12DirectSerialD1Ev), UNUSED)

<P><STRONG><a name="[6e]"></a>fhss_timeout_s::fhss_timeout_s()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\arm_hal_fhss_timer.o(i._ZN14fhss_timeout_sC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fhss_timeout_s::fhss_timeout_s() &rArr; mbed::TimerEvent::TimerEvent__sub_object() &rArr; ticker_set_handler &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_fhss_timer.o(i.__sti___22_arm_hal_fhss_timer_cpp_12d6f2f7)
</UL>
<P><STRONG><a name="[3b7]"></a>fhss_timeout_s::fhss_timeout_s__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\arm_hal_fhss_timer.o(i._ZN14fhss_timeout_sC1Ev), UNUSED)

<P><STRONG><a name="[64]"></a>fhss_timeout_s::~fhss_timeout_s()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\arm_hal_fhss_timer.o(i._ZN14fhss_timeout_sD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = fhss_timeout_s::~fhss_timeout_s() &rArr; mbed::Ticker::detach() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_fhss_timer.o(i.<Func7>)
</UL>
<P><STRONG><a name="[3b8]"></a>fhss_timeout_s::~fhss_timeout_s__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\arm_hal_fhss_timer.o(i._ZN14fhss_timeout_sD1Ev), UNUSED)

<P><STRONG><a name="[224]"></a>mbed::DigitalOut::DigitalOut(PinName)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\busout.o(i._ZN4mbed10DigitalOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbed::DigitalOut::DigitalOut(PinName) &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_pc
</UL>

<P><STRONG><a name="[3b9]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\busout.o(i._ZN4mbed10DigitalOutC1E7PinName), UNUSED)

<P><STRONG><a name="[be]"></a>mbed::FileHandle::size()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileHandle::size()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> stream.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[b8]"></a>mbed::FileHandle::sync()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandle4syncEv))
<BR>[Address Reference Count : 3]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.constdata__ZTV12DirectSerial)
<LI> stream.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[bd]"></a>mbed::FileHandle::isatty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandle6isattyEv))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> stream.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[3ba]"></a>mbed::FileHandle::~FileHandle()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandleD2Ev), UNUSED)

<P><STRONG><a name="[bc]"></a>mbed::FileHandle::~FileHandle__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandleD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::~DirectSerial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[226]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::SerialBase::_base_putc(int) &rArr; serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_putc(int)
</UL>

<P><STRONG><a name="[68]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq) &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[b4]"></a>mbed::SerialBase::interrupt_handler_asynch()</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase24interrupt_handler_asynchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::interrupt_handler_asynch() &rArr; serial_irq_handler_asynch &rArr; serial_rx_irq_handler_asynch &rArr; serial_rx_abort_asynch_intern &rArr; serial_unblock_sleep &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::operator bool() const
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::call(int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata)
</UL>
<P><STRONG><a name="[22c]"></a>mbed::SerialBase::baud(int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase4baudEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbed::SerialBase::baud(int) &rArr; serial_baud &rArr; serial_leuart_baud &rArr; CMU_ClockSelectSet &rArr; EMU_VScaleEM01ByClock &rArr; EMU_VScaleEM01 &rArr; CMU_UpdateWaitStates &rArr; setRamWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>mbed::SerialBase::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[22d]"></a>mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
</UL>

<P><STRONG><a name="[c0]"></a>mbed::SerialBase::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[230]"></a>mbed::SerialBase::SerialBase(PinName, PinName, int)</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>

<P><STRONG><a name="[3bb]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i), UNUSED)

<P><STRONG><a name="[c1]"></a>mbed::SerialBase::~SerialBase()</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::~SerialBase() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CThunkBase::cthunk_free(void(*)())
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[3bc]"></a>mbed::SerialBase::~SerialBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev), UNUSED)

<P><STRONG><a name="[236]"></a>mbed::TimerEvent::insert_absolute(unsigned long long)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEvent15insert_absoluteEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::schedule_tick(unsigned)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[6a]"></a>mbed::TimerEvent::irq(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEvent3irqEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::TimerEvent::irq(unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timerevent.o(i._ZN4mbed10TimerEventC2Ev)
<LI> timerevent.o(i._ZN4mbed10TimerEventC2EPK13ticker_data_t)
</UL>
<P><STRONG><a name="[238]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEvent6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::suspend(unsigned)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::resume()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::cancel_tick()
</UL>

<P><STRONG><a name="[23a]"></a>mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEventC2EPK13ticker_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*) &rArr; ticker_set_handler &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::SysTimer()
</UL>

<P><STRONG><a name="[222]"></a>mbed::TimerEvent::TimerEvent__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEventC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object() &rArr; ticker_set_handler &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fhss_timeout_s::fhss_timeout_s()
</UL>

<P><STRONG><a name="[3bd]"></a>mbed::TimerEvent::~TimerEvent()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEventD2Ev), UNUSED)

<P><STRONG><a name="[c2]"></a>mbed::TimerEvent::~TimerEvent__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\timerevent.o(i._ZN4mbed10TimerEventD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbed::TimerEvent::~TimerEvent__sub_object() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fhss_timeout_s::~fhss_timeout_s()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[23d]"></a>mbed::bind_to_fd(mbed::FileHandle*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._ZN4mbed10bind_to_fdEPNS_10FileHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = mbed::bind_to_fd(mbed::FileHandle*) &rArr; reserve_filehandle() &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[23e]"></a>mbed::DigitalInOut::mode(PinMode)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\i2c.o(i._ZN4mbed12DigitalInOut4modeE7PinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbed::DigitalInOut::mode(PinMode) &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
</UL>

<P><STRONG><a name="[240]"></a>mbed::DigitalInOut::input()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\i2c.o(i._ZN4mbed12DigitalInOut5inputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbed::DigitalInOut::input() &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
</UL>

<P><STRONG><a name="[242]"></a>mbed::DigitalInOut::output()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\i2c.o(i._ZN4mbed12DigitalInOut6outputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbed::DigitalInOut::output() &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
</UL>

<P><STRONG><a name="[243]"></a>mbed::DigitalInOut::DigitalInOut(PinName, PinDirection, PinMode, int)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, .\build\i2c.o(i._ZN4mbed12DigitalInOutC1E7PinName12PinDirection7PinModei))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbed::DigitalInOut::DigitalInOut(PinName, PinDirection, PinMode, int) &rArr; gpio_init_inout &rArr; _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_inout
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
</UL>

<P><STRONG><a name="[3be]"></a>mbed::DigitalInOut::DigitalInOut__sub_object(PinName, PinDirection, PinMode, int)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, .\build\i2c.o(i._ZN4mbed12DigitalInOutC1E7PinName12PinDirection7PinModei), UNUSED)

<P><STRONG><a name="[245]"></a>mbed::DigitalInOut::operator =(int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\i2c.o(i._ZN4mbed12DigitalInOutaSEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed::DigitalInOut::operator =(int) &rArr; gpio_write
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
</UL>

<P><STRONG><a name="[247]"></a>mbed::DigitalInOut::operator int()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\i2c.o(i._ZN4mbed12DigitalInOutcviEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::DigitalInOut::operator int() &rArr; gpio_read &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
</UL>

<P><STRONG><a name="[249]"></a>mbed::transaction_t::transaction_t()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::transaction_t::transaction_t() &rArr; mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction()
</UL>

<P><STRONG><a name="[3bf]"></a>mbed::transaction_t::transaction_t__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tC1Ev), UNUSED)

<P><STRONG><a name="[24a]"></a>mbed::transaction_t::~transaction_t()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::transaction_t::~transaction_t() &rArr; mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()
</UL>

<P><STRONG><a name="[3c0]"></a>mbed::transaction_t::~transaction_t__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tD1Ev), UNUSED)

<P><STRONG><a name="[24b]"></a>mbed::remove_filehandle(mbed::FileHandle*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._ZN4mbed17remove_filehandleEPNS_10FileHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mbed::remove_filehandle(mbed::FileHandle*) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() const
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>

<P><STRONG><a name="[203]"></a>mbed::mbed_override_console(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN4mbed21mbed_override_consoleEi))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[24c]"></a>mbed::mbed_set_unbuffered_stream(std::__FILE*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZN4mbed26mbed_set_unbuffered_streamEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::mbed_set_unbuffered_stream(std::__FILE*) &rArr; setbuf &rArr; setvbuf &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[204]"></a>mbed::mbed_target_override_console(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._ZN4mbed28mbed_target_override_consoleEi))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[24d]"></a>mbed::I2C::unlock_deep_sleep()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\i2c.o(i._ZN4mbed3I2C17unlock_deep_sleepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::unlock_deep_sleep() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::irq_handler_asynch()
</UL>

<P><STRONG><a name="[a3]"></a>mbed::I2C::irq_handler_asynch()</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, .\build\i2c.o(i._ZN4mbed3I2C18irq_handler_asynchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::irq_handler_asynch() &rArr; i2c_irq_handler_asynch &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_irq_handler_asynch
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock_deep_sleep()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>mbed::I2C::lock()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\i2c.o(i._ZN4mbed3I2C4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::lock() &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() const
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTVN4mbed3I2CE)
</UL>
<P><STRONG><a name="[201]"></a>mbed::I2C::read(int, char*, int, bool)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, .\build\i2c.o(i._ZN4mbed3I2C4readEiPcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbed::I2C::read(int, char*, int, bool) &rArr; mbed::I2C::aquire() &rArr; i2c_frequency &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::aquire()
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSensor()
</UL>

<P><STRONG><a name="[200]"></a>mbed::I2C::write(int, const char*, int, bool)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, .\build\i2c.o(i._ZN4mbed3I2C5writeEiPKcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbed::I2C::write(int, const char*, int, bool) &rArr; mbed::I2C::aquire() &rArr; i2c_frequency &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::aquire()
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSensor()
</UL>

<P><STRONG><a name="[24f]"></a>mbed::I2C::aquire()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\i2c.o(i._ZN4mbed3I2C6aquireEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbed::I2C::aquire() &rArr; i2c_frequency &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[c4]"></a>mbed::I2C::unlock()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\i2c.o(i._ZN4mbed3I2C6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::unlock() &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() const
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZTVN4mbed3I2CE)
</UL>
<P><STRONG><a name="[253]"></a>mbed::I2C::recover(PinName, PinName)</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, .\build\i2c.o(i._ZN4mbed3I2C7recoverE7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mbed::I2C::recover(PinName, PinName) &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::operator int()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::operator =(int)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::DigitalInOut(PinName, PinDirection, PinMode, int)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::output()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::input()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::mode(PinMode)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
</UL>

<P><STRONG><a name="[255]"></a>mbed::I2C::I2C(PinName, PinName)</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, .\build\i2c.o(i._ZN4mbed3I2CC1E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = mbed::I2C::I2C(PinName, PinName) &rArr; mbed::I2C::unlock() &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::lock()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_pc
</UL>

<P><STRONG><a name="[3c1]"></a>mbed::I2C::I2C__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, .\build\i2c.o(i._ZN4mbed3I2CC1E7PinNameS1_), UNUSED)

<P><STRONG><a name="[73]"></a>mbed::I2C::~I2C()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\i2c.o(i._ZN4mbed3I2CD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::I2C::~I2C() &rArr; CThunkBase::cthunk_free(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CThunkBase::cthunk_free(void(*)())
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> i2c.o(.constdata__ZTVN4mbed3I2CE)
<LI> main.o(i.__sti___8_main_cpp_pc)
</UL>
<P><STRONG><a name="[3c2]"></a>mbed::I2C::~I2C__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\i2c.o(i._ZN4mbed3I2CD1Ev), UNUSED)

<P><STRONG><a name="[257]"></a>mbed::Timer::reset()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5Timer5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mbed::Timer::reset() &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
</UL>

<P><STRONG><a name="[259]"></a>mbed::Timer::Timer()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5TimerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbed::Timer::Timer() &rArr; mbed::Timer::reset() &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_arm_hal_fhss_timer_cpp_12d6f2f7
</UL>

<P><STRONG><a name="[3c3]"></a>mbed::Timer::Timer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5TimerC1Ev), UNUSED)

<P><STRONG><a name="[6d]"></a>mbed::Timer::~Timer()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5TimerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::~Timer() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_fhss_timer.o(i.__sti___22_arm_hal_fhss_timer_cpp_12d6f2f7)
</UL>
<P><STRONG><a name="[3c4]"></a>mbed::Timer::~Timer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\timer.o(i._ZN4mbed5TimerD1Ev), UNUSED)

<P><STRONG><a name="[c5]"></a>mbed::Serial::lock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6Serial4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::lock() &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-196} to mbed::Serial::lock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[c7]"></a>mbed::Serial::_putc(int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\serial.o(i._ZN4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-196} to mbed::Serial::_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[c6]"></a>mbed::Serial::unlock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6Serial6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::unlock() &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-196} to mbed::Serial::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[25a]"></a>mbed::Serial::Serial(PinName, PinName, const char*, int)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, .\build\serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_pc
</UL>

<P><STRONG><a name="[3c5]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, const char*, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKci), UNUSED)

<P><STRONG><a name="[72]"></a>mbed::Serial::~Serial()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6SerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::~Serial() &rArr; mbed::SerialBase::~SerialBase() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> main.o(i.__sti___8_main_cpp_pc)
</UL>
<P><STRONG><a name="[3c6]"></a>mbed::Serial::~Serial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6SerialD1Ev), UNUSED)

<P><STRONG><a name="[d2]"></a>mbed::Stream::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[c9]"></a>mbed::Stream::seek(long, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream4seekEli))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[cd]"></a>mbed::Stream::size()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream4sizeEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[cb]"></a>mbed::Stream::sync()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream4syncEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[ca]"></a>mbed::Stream::close()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[c8]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, .\build\stream.o(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[cc]"></a>mbed::Stream::isatty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream6isattyEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[25e]"></a>mbed::Stream::printf(const char*, ...)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, .\build\stream.o(i._ZN4mbed6Stream6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::printf(const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>mbed::Stream::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[25b]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, .\build\stream.o(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>

<P><STRONG><a name="[3c7]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed6StreamD2Ev), UNUSED)

<P><STRONG><a name="[d1]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[223]"></a>mbed::Ticker::detach()</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, .\build\ticker.o(i._ZN4mbed6Ticker6detachEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = mbed::Ticker::detach() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fhss_timeout_s::~fhss_timeout_s()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::handler()
</UL>

<P><STRONG><a name="[d4]"></a>mbed::Ticker::handler()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\build\ticker.o(i._ZN4mbed6Ticker7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mbed::Ticker::handler() &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[260]"></a>mbed::fdopen(mbed::FileHandle*, const char*)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._ZN4mbed6fdopenEPNS_10FileHandleEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::bind_to_fd(mbed::FileHandle*)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unbind_from_fd(int, mbed::FileHandle*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[d5]"></a>mbed::Timeout::handler()</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, .\build\timeout.o(i._ZN4mbed7Timeout7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = mbed::Timeout::handler() &rArr; mbed::Ticker::detach() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeout.o(.constdata__ZTVN4mbed7TimeoutE)
</UL>
<P><STRONG><a name="[265]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filebase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>

<P><STRONG><a name="[262]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, .\build\filebase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() const
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[25f]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::FileBase(const char*, mbed::PathType) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() const
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[3c8]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[d6]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() const
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filebase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[3c9]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseD1Ev), UNUSED)

<P><STRONG><a name="[3ca]"></a>mbed::FileLike::~FileLike()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed8FileLikeD2Ev), UNUSED)

<P><STRONG><a name="[d7]"></a>mbed::FileLike::~FileLike__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed8FileLikeD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[266]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::fileSystem() &rArr; mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[267]"></a>mbed::FilePath::isFileSystem()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath12isFileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[268]"></a>mbed::FilePath::file()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::file() &rArr; mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[2de]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\filepath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[269]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[2df]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filepath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[26a]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, .\build\filepath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[3cb]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\filepath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[26c]"></a>rtos::ThisThread::sleep_for(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\thisthread.o(i._ZN4rtos10ThisThread9sleep_forEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtos::ThisThread::sleep_for(unsigned) &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>

<P><STRONG><a name="[26e]"></a>rtos::Mutex::constructor(const char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, .\build\mutex.o(i._ZN4rtos5Mutex11constructorEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
</UL>

<P><STRONG><a name="[21c]"></a>rtos::Mutex::lock()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\mutex.o(i._ZN4rtos5Mutex4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = rtos::Mutex::lock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::lock()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::lock()
</UL>

<P><STRONG><a name="[21d]"></a>rtos::Mutex::unlock()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\mutex.o(i._ZN4rtos5Mutex6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::unlock()
</UL>

<P><STRONG><a name="[25c]"></a>rtos::Mutex::Mutex()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get() const
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>

<P><STRONG><a name="[3cc]"></a>rtos::Mutex::Mutex__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexC1Ev), UNUSED)

<P><STRONG><a name="[25d]"></a>rtos::Mutex::~Mutex()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtos::Mutex::~Mutex() &rArr; osMutexDelete &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>

<P><STRONG><a name="[3cd]"></a>rtos::Mutex::~Mutex__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\mutex.o(i._ZN4rtos5MutexD1Ev), UNUSED)

<P><STRONG><a name="[1ea]"></a>rtos::internal::SysTimer::cancel_tick()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer11cancel_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rtos::internal::SysTimer::cancel_tick() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Disable
</UL>

<P><STRONG><a name="[1ed]"></a>rtos::internal::SysTimer::schedule_tick(unsigned)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer13schedule_tickEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rtos::internal::SysTimer::schedule_tick(unsigned) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::suspend(unsigned)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::handler()
</UL>

<P><STRONG><a name="[273]"></a>rtos::internal::SysTimer::_increment_tick()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer15_increment_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtos::internal::SysTimer::_increment_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::handler()
</UL>

<P><STRONG><a name="[272]"></a>rtos::internal::SysTimer::_set_irq_pending()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer16_set_irq_pendingEv))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::handler()
</UL>

<P><STRONG><a name="[215]"></a>rtos::internal::SysTimer::suspend_time_passed()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer19suspend_time_passedEv))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[217]"></a>rtos::internal::SysTimer::resume()</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer6resumeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rtos::internal::SysTimer::resume() &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[d8]"></a>rtos::internal::SysTimer::handler()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rtos::internal::SysTimer::handler() &rArr; rtos::internal::SysTimer::schedule_tick(unsigned) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::schedule_tick(unsigned)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::_set_irq_pending()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::_increment_tick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systimer.o(.constdata__ZTVN4rtos8internal8SysTimerE)
</UL>
<P><STRONG><a name="[211]"></a>rtos::internal::SysTimer::suspend(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer7suspendEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rtos::internal::SysTimer::suspend(unsigned) &rArr; rtos::internal::SysTimer::schedule_tick(unsigned) &rArr; mbed::TimerEvent::insert_absolute(unsigned long long) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::schedule_tick(unsigned)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[1ec]"></a>rtos::internal::SysTimer::setup_irq()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimer9setup_irqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtos::internal::SysTimer::setup_irq() &rArr; OS_Tick_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>

<P><STRONG><a name="[1eb]"></a>rtos::internal::SysTimer::SysTimer()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rtos::internal::SysTimer::SysTimer() &rArr; mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*) &rArr; ticker_set_handler &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lp_ticker_data
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>

<P><STRONG><a name="[3ce]"></a>rtos::internal::SysTimer::SysTimer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\systimer.o(i._ZN4rtos8internal8SysTimerC1Ev), UNUSED)

<P><STRONG><a name="[276]"></a>rtos::Semaphore::constructor(int, unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, .\build\semaphore.o(i._ZN4rtos9Semaphore11constructorEit))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int, unsigned short)
</UL>

<P><STRONG><a name="[278]"></a>rtos::Semaphore::Semaphore(int, unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreC1Eit))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = rtos::Semaphore::Semaphore(int, unsigned short) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL_EMAC::SL_EMAC()
</UL>

<P><STRONG><a name="[3cf]"></a>rtos::Semaphore::Semaphore__sub_object(int, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreC1Eit), UNUSED)

<P><STRONG><a name="[279]"></a>rtos::Semaphore::~Semaphore()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = rtos::Semaphore::~Semaphore() &rArr; osSemaphoreDelete &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL_EMAC::~SL_EMAC()
</UL>

<P><STRONG><a name="[3d0]"></a>rtos::Semaphore::~Semaphore__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\semaphore.o(i._ZN4rtos9SemaphoreD1Ev), UNUSED)

<P><STRONG><a name="[1bd]"></a>SL_EMAC::get_instance()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\sl_emac.o(i._ZN7SL_EMAC12get_instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = SL_EMAC::get_instance() &rArr; SL_EMAC::SL_EMAC() &rArr; rtos::Semaphore::Semaphore(int, unsigned short) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL_EMAC::SL_EMAC()
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[27b]"></a>SL_EMAC::SL_EMAC()</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, .\build\sl_emac.o(i._ZN7SL_EMACC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = SL_EMAC::SL_EMAC() &rArr; rtos::Semaphore::Semaphore(int, unsigned short) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int, unsigned short)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL_EMAC::get_instance()
</UL>

<P><STRONG><a name="[3d1]"></a>SL_EMAC::SL_EMAC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\sl_emac.o(i._ZN7SL_EMACC1Ev), UNUSED)

<P><STRONG><a name="[6c]"></a>SL_EMAC::~SL_EMAC()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\build\sl_emac.o(i._ZN7SL_EMACD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = SL_EMAC::~SL_EMAC() &rArr; rtos::Semaphore::~Semaphore() &rArr; osSemaphoreDelete &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::~Semaphore()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(bool)&rang;::~Callback()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(void*)&rang;::~Callback()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sl_emac.o(i._ZN7SL_EMAC12get_instanceEv)
</UL>
<P><STRONG><a name="[3d2]"></a>SL_EMAC::~SL_EMAC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\sl_emac.o(i._ZN7SL_EMACD1Ev), UNUSED)

<P><STRONG><a name="[cf]"></a>thunk{-196} to mbed::Serial::lock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serial.o(i._ZThn196_N4mbed6Serial4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = thunk{-196} to mbed::Serial::lock() &rArr; mbed::Serial::lock() &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::lock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[ce]"></a>thunk{-196} to mbed::Serial::_putc(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\serial.o(i._ZThn196_N4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = thunk{-196} to mbed::Serial::_putc(int) &rArr; mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[d0]"></a>thunk{-196} to mbed::Serial::unlock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serial.o(i._ZThn196_N4mbed6Serial6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = thunk{-196} to mbed::Serial::unlock() &rArr; mbed::Serial::unlock() &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[165]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(fpclassify.o)(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[20b]"></a>__aeabi_atexit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i.__aeabi_atexit))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_arm_hal_fhss_timer_cpp_12d6f2f7
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_SPI_cpp_ab1f1164
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL_EMAC::get_instance()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_pc
</UL>

<P><STRONG><a name="[232]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(aeabi_vec_ctor_nocookie_nodtor.o)(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_arm_hal_fhss_timer_cpp_12d6f2f7
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_SPI_cpp_ab1f1164
</UL>

<P><STRONG><a name="[209]"></a>__cxa_guard_acquire</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL_EMAC::get_instance()
</UL>

<P><STRONG><a name="[20c]"></a>__cxa_guard_release</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i.__cxa_guard_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxa_guard_release &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL_EMAC::get_instance()
</UL>

<P><STRONG><a name="[bb]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 5]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> sl_emac.o(.constdata__ZTV4EMAC)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> stream.o(.constdata__ZTVN4mbed8FileLikeE)
<LI> timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[ef]"></a>__rt_entry</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, .\build\mbed_boot_arm_std.o(i.__rt_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = __rt_entry &rArr; mbed_init &rArr; mbed_rtos_init &rArr; osKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[12a]"></a>__user_perthread_libspace</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\build\mbed_boot_arm_std.o(i.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __user_perthread_libspace &rArr; osThreadGetId &rArr; svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[140]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__printf_wp.o)(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[e9]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\mbed_boot_arm_std.o(i._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[ea]"></a>_mutex_free</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\build\mbed_boot_arm_std.o(i._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _mutex_free &rArr; free &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[eb]"></a>_mutex_initialize</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, .\build\mbed_boot_arm_std.o(i._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _mutex_initialize &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[ec]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mbed_boot_arm_std.o(i._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[280]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\rtx_lib.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[14b]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = _sys_close &rArr; close &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[145]"></a>_sys_flen</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _sys_flen &rArr;  get_fhc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[143]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _sys_istty &rArr; isatty &rArr;  get_fhc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[152]"></a>_sys_open</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[16e]"></a>_sys_seek</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _sys_seek &rArr; lseek &rArr;  get_fhc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[16f]"></a>_sys_write</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, .\build\mbed_retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = _sys_write &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_crlf(int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[31a]"></a>_ticker_match_interval_passed</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\mbed_ticker_api.o(i._ticker_match_interval_passed))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[2a6]"></a>block_and_wait_for_ack</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, .\build\i2c_api.o(i.block_and_wait_for_ack))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_byte_write
</UL>

<P><STRONG><a name="[288]"></a>close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = close &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[28e]"></a>core_util_are_interrupts_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_critical.o(i.core_util_are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[341]"></a>core_util_atomic_decr_u16</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\mbed_critical.o(i.core_util_atomic_decr_u16))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>

<P><STRONG><a name="[297]"></a>core_util_atomic_flag_test_and_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\mbed_critical.o(i.core_util_atomic_flag_test_and_set))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[33f]"></a>core_util_atomic_incr_u16</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\mbed_critical.o(i.core_util_atomic_incr_u16))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
</UL>

<P><STRONG><a name="[212]"></a>core_util_critical_section_enter</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_critical.o(i.core_util_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::~Timer()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::output()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::input()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::mode(PinMode)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::suspend(unsigned)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::resume()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::schedule_tick(unsigned)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::cancel_tick()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::handler()
</UL>

<P><STRONG><a name="[214]"></a>core_util_critical_section_exit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\mbed_critical.o(i.core_util_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::~Timer()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::output()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::input()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::mode(PinMode)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::suspend(unsigned)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::resume()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::schedule_tick(unsigned)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::cancel_tick()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::handler()
</UL>

<P><STRONG><a name="[28d]"></a>core_util_is_isr_active</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_critical.o(i.core_util_is_isr_active))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[334]"></a>dma_channel_free</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\dma_api.o(i.dma_channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
</UL>

<P><STRONG><a name="[296]"></a>error</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, .\build\mbed_error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_flag_test_and_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_location
</UL>

<P><STRONG><a name="[29c]"></a>exit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[261]"></a>fdopen</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i.fdopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[63]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fputc.o)(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[29d]"></a>fsync</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i.fsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = fsync &rArr;  get_fhc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[275]"></a>get_lp_ticker_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_lp_ticker_api.o(i.get_lp_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::SysTimer()
</UL>

<P><STRONG><a name="[23c]"></a>get_us_ticker_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(i.get_us_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[241]"></a>gpio_dir</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::output()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::input()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[285]"></a>gpio_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gpio_init &rArr; CMU_ClockEnable &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[244]"></a>gpio_init_inout</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, .\build\mbed_gpio.o(i.gpio_init_inout))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gpio_init_inout &rArr; _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::DigitalInOut(PinName, PinDirection, PinMode, int)
</UL>

<P><STRONG><a name="[225]"></a>gpio_init_out</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[2a1]"></a>gpio_init_out_ex</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i.gpio_init_out_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[23f]"></a>gpio_mode</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, .\build\gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::mode(PinMode)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[248]"></a>gpio_read</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.gpio_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_read &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::operator int()
</UL>

<P><STRONG><a name="[246]"></a>gpio_write</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, .\build\gpio_api.o(i.gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalInOut::operator =(int)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_inout
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[294]"></a>hal_critical_section_enter</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\mbed_critical_section_api.o(i.hal_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_critical_section_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>

<P><STRONG><a name="[295]"></a>hal_critical_section_exit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_critical_section_api.o(i.hal_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
</UL>

<P><STRONG><a name="[340]"></a>hal_sleep</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\sleep.o(i.hal_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[2b1]"></a>i2c_byte_read</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, .\build\i2c_api.o(i.i2c_byte_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[2a5]"></a>i2c_byte_write</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, .\build\i2c_api.o(i.i2c_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_and_wait_for_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[2a7]"></a>i2c_enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\i2c_api.o(i.i2c_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = i2c_enable &rArr; I2C_Enable &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[2a8]"></a>i2c_enable_interrupt</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, .\build\i2c_api.o(i.i2c_enable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = i2c_enable_interrupt &rArr; i2c_get_index &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_irq_handler_asynch
</UL>

<P><STRONG><a name="[252]"></a>i2c_frequency</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\i2c_api.o(i.i2c_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = i2c_frequency &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusFreqSet
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::aquire()
</UL>

<P><STRONG><a name="[256]"></a>i2c_init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, .\build\i2c_api.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = i2c_init &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_location
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_mode
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_get_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
</UL>

<P><STRONG><a name="[24e]"></a>i2c_irq_handler_asynch</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, .\build\i2c_api.o(i.i2c_irq_handler_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = i2c_irq_handler_asynch &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable_interrupt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::irq_handler_asynch()
</UL>

<P><STRONG><a name="[250]"></a>i2c_read</STRONG> (Thumb, 136 bytes, Stack size 36 bytes, .\build\i2c_api.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_read &rArr; i2c_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_byte_write
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[2ae]"></a>i2c_slave_mode</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, .\build\i2c_api.o(i.i2c_slave_mode))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[2b0]"></a>i2c_start</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\i2c_api.o(i.i2c_start))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[2b2]"></a>i2c_stop</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\i2c_api.o(i.i2c_stop))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[251]"></a>i2c_write</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, .\build\i2c_api.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_write &rArr; i2c_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
</UL>

<P><STRONG><a name="[289]"></a>isatty</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i.isatty))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = isatty &rArr;  get_fhc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdopen
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>

<P><STRONG><a name="[a7]"></a>lp_ticker_clear_interrupt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\rtcc.o(i.lp_ticker_clear_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lp_ticker_clear_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_IntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>lp_ticker_disable_interrupt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\rtcc.o(i.lp_ticker_disable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lp_ticker_disable_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>lp_ticker_fire_interrupt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\rtcc.o(i.lp_ticker_fire_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lp_ticker_fire_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_IntEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>lp_ticker_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\rtcc.o(i.lp_ticker_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lp_ticker_free &rArr; lp_ticker_disable_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_disable_interrupt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_clear_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>lp_ticker_get_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\rtcc.o(i.lp_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>lp_ticker_init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, .\build\rtcc.o(i.lp_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lp_ticker_init &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_ChannelInit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_IntDisable
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[1ee]"></a>lp_ticker_irq_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mbed_lp_ticker_api.o(i.lp_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lp_ticker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>lp_ticker_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\rtcc.o(i.lp_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lp_ticker_read &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>lp_ticker_set_interrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\rtcc.o(i.lp_ticker_set_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lp_ticker_set_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_IntEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[28c]"></a>lseek</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i.lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = lseek &rArr;  get_fhc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[2cc]"></a>main</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, .\build\main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = main &rArr; wait &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSensor()
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[228]"></a>mbed_assert_internal</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\mbed_assert.o(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::irq_handler_asynch()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_mpu_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get() const
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::ThisThread::sleep_for(unsigned)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_leuart_baud
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_tx_irq_index
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_rx_irq_index
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::call(int) const
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::handler()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[29e]"></a>mbed_die</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, .\build\mbed_board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[1c1]"></a>mbed_error</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\mbed_error.o(i.mbed_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_flag_test_and_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[2db]"></a>mbed_error_initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_error.o(i.mbed_error_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[2cf]"></a>mbed_error_printf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, .\build\mbed_board.o(i.mbed_error_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = mbed_error_printf &rArr; mbed_error_vprintf &rArr;  mbed_error_puts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_context_info
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
</UL>

<P><STRONG><a name="[2d0]"></a>mbed_error_puts</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\mbed_board.o(i.mbed_error_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
</UL>

<P><STRONG><a name="[29a]"></a>mbed_error_vprintf</STRONG> (Thumb, 52 bytes, Stack size 152 bytes, .\build\mbed_board.o(i.mbed_error_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = mbed_error_vprintf &rArr;  mbed_error_puts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[125]"></a>mbed_fault_handler</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, .\build\mbed_fault_handler.o(i.mbed_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mbed_fault_handler &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_context_info
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>

<P><STRONG><a name="[27f]"></a>mbed_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i.mbed_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mbed_init &rArr; mbed_rtos_init &rArr; osKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_mpu_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_cpy_nvic
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2da]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_boot.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[2d2]"></a>mbed_mpu_init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, .\build\mbed_mpu_v7m.o(i.mbed_mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed_mpu_init &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_SetRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
</UL>

<P><STRONG><a name="[2d5]"></a>mbed_rtos_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_rtos_rtx.o(i.mbed_rtos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = mbed_rtos_init &rArr; osKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
</UL>

<P><STRONG><a name="[281]"></a>mbed_rtos_start</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, .\build\mbed_rtos_rtx.o(i.mbed_rtos_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = mbed_rtos_start &rArr; osKernelStart &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2d4]"></a>mbed_sdk_init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, .\build\mbed_overrides.o(i.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbed_sdk_init &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFXOInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockSet
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockSet
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
</UL>

<P><STRONG><a name="[74]"></a>mbed_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_boot.o(i.mbed_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = mbed_start &rArr; main &rArr; wait &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_toolchain_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_initialize
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtos_rtx.o(i.mbed_rtos_start)
</UL>
<P><STRONG><a name="[2d9]"></a>mbed_toolchain_init</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, .\build\mbed_boot_arm_std.o(i.mbed_toolchain_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = mbed_toolchain_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[2dd]"></a>mbed_warning</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, .\build\mbed_error.o(i.mbed_warning))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbed_warning &rArr; handle_error &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[28b]"></a>open</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, .\build\mbed_retarget.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_open_errors(int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[26d]"></a>osDelay</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\rtx_delay.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osDelay &rArr; EvrRtxThreadError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::ThisThread::sleep_for(unsigned)
</UL>

<P><STRONG><a name="[2e2]"></a>osKernelGetState</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivileged
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[287]"></a>osKernelInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[218]"></a>osKernelResume</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.osKernelResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = osKernelResume &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[2d8]"></a>osKernelStart</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
</UL>

<P><STRONG><a name="[20f]"></a>osKernelSuspend</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.osKernelSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = osKernelSuspend &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[2e7]"></a>osMessageQueueGet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[2ea]"></a>osMessageQueueNew</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = osMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[2eb]"></a>osMessageQueuePut</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[207]"></a>osMutexAcquire</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osMutexAcquire &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_lock()
</UL>

<P><STRONG><a name="[270]"></a>osMutexDelete</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osMutexDelete &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[26f]"></a>osMutexNew</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osMutexNew &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(const char*)
</UL>

<P><STRONG><a name="[20e]"></a>osMutexRelease</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
</UL>

<P><STRONG><a name="[283]"></a>osRtxErrorNotify</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(i.osRtxErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>

<P><STRONG><a name="[82]"></a>osRtxIdleThread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(i.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_idle_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[2e6]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_lib.o(i.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[2ef]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, .\build\rtx_memory.o(i.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[2f1]"></a>osRtxMemoryFree</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, .\build\rtx_memory.o(i.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
</UL>

<P><STRONG><a name="[2f2]"></a>osRtxMemoryInit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, .\build\rtx_memory.o(i.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxMemoryInit &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[2ba]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(i.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[2f5]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(i.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
</UL>

<P><STRONG><a name="[342]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(i.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[2fb]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(i.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[126]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, .\build\rtx_system.o(i.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[2b8]"></a>osRtxPostProcess</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\rtx_system.o(i.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[2fd]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
</UL>

<P><STRONG><a name="[2fc]"></a>osRtxThreadDispatch</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, .\build\rtx_thread.o(i.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
</UL>

<P><STRONG><a name="[2f8]"></a>osRtxThreadListGet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[306]"></a>osRtxThreadListPut</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, .\build\rtx_thread.o(i.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>

<P><STRONG><a name="[2fe]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[305]"></a>osRtxThreadListSort</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[2ff]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[2fa]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[307]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadStackCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[308]"></a>osRtxThreadStartup</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[303]"></a>osRtxThreadSwitch</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[309]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[2f9]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, .\build\rtx_thread.o(i.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[127]"></a>osRtxTick_Handler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, .\build\rtx_system.o(i.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[83]"></a>osRtxTimerThread</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, .\build\rtx_timer.o(i.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[27a]"></a>osSemaphoreDelete</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = osSemaphoreDelete &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::~Semaphore()
</UL>

<P><STRONG><a name="[277]"></a>osSemaphoreNew</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, .\build\rtx_semaphore.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
</UL>

<P><STRONG><a name="[9f]"></a>osThreadExit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadExit &rArr; osThreadGetId &rArr; svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[1be]"></a>osThreadFlagsSet</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[1c7]"></a>osThreadGetId</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadGetId &rArr; svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
</UL>

<P><STRONG><a name="[2d7]"></a>osThreadNew</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, .\build\rtx_thread.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osThreadNew &rArr; EvrRtxThreadError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMode
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
</UL>

<P><STRONG><a name="[2ad]"></a>pin_location</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\pinmap_function.o(i.pin_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_get_function_field
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
</UL>

<P><STRONG><a name="[2a2]"></a>pin_mode</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, .\build\pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_enable_pins
</UL>

<P><STRONG><a name="[314]"></a>pinmap_find_peripheral</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\mbed_pinmap_common.o(i.pinmap_find_peripheral))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>

<P><STRONG><a name="[313]"></a>pinmap_get_function_field</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\pinmap_function.o(i.pinmap_get_function_field))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_location
</UL>

<P><STRONG><a name="[2ac]"></a>pinmap_merge</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = pinmap_merge &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
</UL>

<P><STRONG><a name="[2ab]"></a>pinmap_peripheral</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, .\build\mbed_pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = pinmap_peripheral &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
</UL>

<P><STRONG><a name="[2d1]"></a>print_context_info</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, .\build\mbed_fault_handler.o(i.print_context_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = print_context_info &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr;  mbed_error_puts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
</UL>

<P><STRONG><a name="[2ca]"></a>rtc_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, .\build\rtcc.o(i.rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rtc_init &rArr; RTCC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_Reset
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_Init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCC_Enable
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_ResetControl
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
</UL>

<P><STRONG><a name="[2ee]"></a>rtos_idle_loop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(i.rtos_idle_loop))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>

<P><STRONG><a name="[221]"></a>serial_baud</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = serial_baud &rArr; serial_leuart_baud &rArr; CMU_ClockSelectSet &rArr; EMU_VScaleEM01ByClock &rArr; EMU_VScaleEM01 &rArr; CMU_UpdateWaitStates &rArr; setRamWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateAsyncSet
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_leuart_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(PinName, PinName, int)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
</UL>

<P><STRONG><a name="[220]"></a>serial_init</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, .\build\serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_set_route
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_clock
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_enable_pins
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_enable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(PinName, PinName, int)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[233]"></a>serial_irq_handler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serial_irq_handler &rArr; serial_get_index
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[229]"></a>serial_irq_handler_asynch</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_irq_handler_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = serial_irq_handler_asynch &rArr; serial_rx_irq_handler_asynch &rArr; serial_rx_abort_asynch_intern &rArr; serial_unblock_sleep &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_StatusGet
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntGetEnabled
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StatusGet
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntGetEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[22f]"></a>serial_irq_set</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, .\build\serial_api.o(i.serial_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = serial_irq_set &rArr; serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_tx_irq_index
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_rx_irq_index
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[323]"></a>serial_preinit</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, .\build\serial_api.o(i.serial_preinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_location
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[21f]"></a>serial_putc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serial_putc &rArr; LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::write(const void*, unsigned)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>

<P><STRONG><a name="[32a]"></a>serial_rx_irq_handler_asynch</STRONG> (Thumb, 648 bytes, Stack size 24 bytes, .\build\serial_api.o(i.serial_rx_irq_handler_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = serial_rx_irq_handler_asynch &rArr; serial_rx_abort_asynch_intern &rArr; serial_unblock_sleep &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_StatusGet
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_RxDataGet
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntGetEnabled
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntClear
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StatusGet
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxDataGet
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntGetEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[32c]"></a>serial_tx_irq_handler_asynch</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_tx_irq_handler_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = serial_tx_irq_handler_asynch &rArr; serial_tx_abort_asynch_intern &rArr; serial_unblock_sleep &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Tx
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntDisable
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_StatusGet
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntEnable
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntDisable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StatusGet
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[210]"></a>sleep_manager_lock_deep_sleep_internal</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_lock_deep_sleep_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[213]"></a>sleep_manager_sleep_auto</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_sleep_auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sleep_manager_sleep_auto &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[216]"></a>sleep_manager_unlock_deep_sleep_internal</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_unlock_deep_sleep_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::~Timer()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_irq_handler_asynch
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock_deep_sleep()
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_unblock_sleep
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[237]"></a>ticker_insert_event_us</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, .\build\mbed_ticker_api.o(i.ticker_insert_event_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ticker_insert_event_us &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(unsigned long long)
</UL>

<P><STRONG><a name="[e]"></a>ticker_irq_handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(i.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ticker_irq_handler &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mbed_lp_ticker_api.o(.data)
<LI> mbed_us_ticker_api.o(.data)
</UL>
<P><STRONG><a name="[345]"></a>ticker_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(i.ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[258]"></a>ticker_read_us</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(i.ticker_read_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::SysTimer()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::resume()
</UL>

<P><STRONG><a name="[239]"></a>ticker_remove_event</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(i.ticker_remove_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>

<P><STRONG><a name="[23b]"></a>ticker_set_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(i.ticker_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ticker_set_handler &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_handler
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*)
</UL>

<P><STRONG><a name="[af]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\us_ticker.o(i.us_ticker_clear_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_clear_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\us_ticker.o(i.us_ticker_disable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_disable_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>us_ticker_fire_interrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_fire_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>us_ticker_free</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, .\build\us_ticker.o(i.us_ticker_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = us_ticker_free &rArr; CMU_ClockEnable &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>us_ticker_get_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.us_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>us_ticker_init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, .\build\us_ticker.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = us_ticker_init &rArr; CMU_ClockEnable &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitCC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MaxCount
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntClear
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>us_ticker_irq_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mbed_us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(i.us_ticker_init)
</UL>
<P><STRONG><a name="[ad]"></a>us_ticker_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\us_ticker.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = us_ticker_read &rArr; us_ticker_init &rArr; CMU_ClockEnable &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\us_ticker.o(i.us_ticker_set_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = us_ticker_set_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MaxCount
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntDisable
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[2cd]"></a>wait</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, .\build\mbed_wait_api_rtos.o(i.wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = wait &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::ThisThread::sleep_for(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ce]"></a>wait_ms</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\mbed_wait_api_rtos.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = wait_ms &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::ThisThread::sleep_for(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[254]"></a>wait_us</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, .\build\mbed_wait_api_rtos.o(i.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_warning
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::recover(PinName, PinName)
</UL>

<P><STRONG><a name="[290]"></a>write</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[60]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_numeric_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[70]"></a>mbed::Transaction&lang;mbed::SPI&rang;::Transaction()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Transaction&lang;mbed::SPI&rang;::Transaction() &rArr; mbed::transaction_t::transaction_t() &rArr; mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::transaction_t()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i.__sti___7_SPI_cpp_ab1f1164)
</UL>
<P><STRONG><a name="[3d3]"></a>mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEEC1Ev), UNUSED)

<P><STRONG><a name="[a2]"></a>mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Transaction&lang;mbed::SPI&rang;::~Transaction() &rArr; mbed::transaction_t::~transaction_t() &rArr; mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::~transaction_t()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj4EjED1Ev)
</UL>
<P><STRONG><a name="[3d4]"></a>mbed::Transaction&lang;mbed::SPI&rang;::~Transaction__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEED1Ev), UNUSED)

<P><STRONG><a name="[71]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)4, unsigned&rang;::~CircularBuffer()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj4EjED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)4, unsigned&rang;::~CircularBuffer() &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i.__sti___7_SPI_cpp_ab1f1164)
</UL>
<P><STRONG><a name="[3d5]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)4, unsigned&rang;::~CircularBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj4EjED1Ev), UNUSED)

<P><STRONG><a name="[d9]"></a>void mbed::Callback&lang;void(void*)&rang;::function_call&lang;void(*)(void*)&rang;(const void*, void*)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, .\build\sl_emac.o(t._ZN4mbed8CallbackIFvPvEE13function_callIPS2_EEvPKvS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void mbed::Callback&lang;void(void*)&rang;::function_call&lang;void(*)(void*)&rang;(const void*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sl_emac.o(.constdata__ZZN4mbed8CallbackIFvPvEE8generateIPS2_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[db]"></a>void mbed::Callback&lang;void(void*)&rang;::function_dtor&lang;void(*)(void*)&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\sl_emac.o(t._ZN4mbed8CallbackIFvPvEE13function_dtorIPS2_EEvS1_))
<BR>[Address Reference Count : 1]<UL><LI> sl_emac.o(.constdata__ZZN4mbed8CallbackIFvPvEE8generateIPS2_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[da]"></a>void mbed::Callback&lang;void(void*)&rang;::function_move&lang;void(*)(void*)&rang;(void*, const void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\sl_emac.o(t._ZN4mbed8CallbackIFvPvEE13function_moveIPS2_EEvS1_PKv))
<BR>[Address Reference Count : 1]<UL><LI> sl_emac.o(.constdata__ZZN4mbed8CallbackIFvPvEE8generateIPS2_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[27e]"></a>mbed::Callback&lang;void(void*)&rang;::~Callback()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\sl_emac.o(t._ZN4mbed8CallbackIFvPvEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void(void*)&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL_EMAC::~SL_EMAC()
</UL>

<P><STRONG><a name="[3d6]"></a>mbed::Callback&lang;void(void*)&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\sl_emac.o(t._ZN4mbed8CallbackIFvPvEED1Ev), UNUSED)

<P><STRONG><a name="[dc]"></a>void mbed::Callback&lang;void(bool)&rang;::function_call&lang;void(*)(bool)&rang;(const void*, bool)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, .\build\lorawanstack.o(t._ZN4mbed8CallbackIFvbEE13function_callIPS1_EEvPKvb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void mbed::Callback&lang;void(bool)&rang;::function_call&lang;void(*)(bool)&rang;(const void*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawanstack.o(.constdata__ZZN4mbed8CallbackIFvbEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[de]"></a>void mbed::Callback&lang;void(bool)&rang;::function_dtor&lang;void(*)(bool)&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\lorawanstack.o(t._ZN4mbed8CallbackIFvbEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> lorawanstack.o(.constdata__ZZN4mbed8CallbackIFvbEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[dd]"></a>void mbed::Callback&lang;void(bool)&rang;::function_move&lang;void(*)(bool)&rang;(void*, const void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\lorawanstack.o(t._ZN4mbed8CallbackIFvbEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> lorawanstack.o(.constdata__ZZN4mbed8CallbackIFvbEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[27d]"></a>mbed::Callback&lang;void(bool)&rang;::~Callback()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\lorawanstack.o(t._ZN4mbed8CallbackIFvbEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void(bool)&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL_EMAC::~SL_EMAC()
</UL>

<P><STRONG><a name="[3d7]"></a>mbed::Callback&lang;void(bool)&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\lorawanstack.o(t._ZN4mbed8CallbackIFvbEED1Ev), UNUSED)

<P><STRONG><a name="[df]"></a>void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEE13function_callIPS1_EEvPKvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eventqueue.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[e1]"></a>void mbed::Callback&lang;void(int)&rang;::function_dtor&lang;void(*)(int)&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> eventqueue.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[e0]"></a>void mbed::Callback&lang;void(int)&rang;::function_move&lang;void(*)(int)&rang;(void*, const void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> eventqueue.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[231]"></a>mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\serialbase.o(t._ZN4mbed8CallbackIFviEEC1EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::transaction_t()
</UL>

<P><STRONG><a name="[3d8]"></a>mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\serialbase.o(t._ZN4mbed8CallbackIFviEEC1EPS1_), UNUSED)

<P><STRONG><a name="[234]"></a>mbed::Callback&lang;void(int)&rang;::~Callback()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::~I2C()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::~transaction_t()
</UL>

<P><STRONG><a name="[3d9]"></a>mbed::Callback&lang;void(int)&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\eventqueue.o(t._ZN4mbed8CallbackIFviEED1Ev), UNUSED)

<P><STRONG><a name="[e2]"></a>void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\arm_hal_fhss_timer.o(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_fhss_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[e4]"></a>void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\arm_hal_fhss_timer.o(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_fhss_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[e3]"></a>void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\arm_hal_fhss_timer.o(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_fhss_timer.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[183]"></a>mbed::Callback&lang;void()&rang;::Callback(void(*)())</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\arm_hal_fhss_timer.o(t._ZN4mbed8CallbackIFvvEEC1EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fhss_timeout_s::fhss_timeout_s()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func4&rang;
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[3da]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\arm_hal_fhss_timer.o(t._ZN4mbed8CallbackIFvvEEC1EPS1_), UNUSED)

<P><STRONG><a name="[34c]"></a>mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFvvEEC1ERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
</UL>

<P><STRONG><a name="[3db]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFvvEEC1ERKS2_), UNUSED)

<P><STRONG><a name="[69]"></a>mbed::Callback&lang;void()&rang;::~Callback()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\arm_hal_fhss_timer.o(t._ZN4mbed8CallbackIFvvEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fhss_timeout_s::~fhss_timeout_s()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseD1Ev)
</UL>
<P><STRONG><a name="[3dc]"></a>mbed::Callback&lang;void()&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\arm_hal_fhss_timer.o(t._ZN4mbed8CallbackIFvvEED1Ev), UNUSED)

<P><STRONG><a name="[22e]"></a>mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\at_cellularnetwork.o(t._ZN4mbed8CallbackIFvvEEaSERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&) &rArr; mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(const mbed::Callback&lang;void()&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[66]"></a>CThunk&lang;mbed::SerialBase&rang;::trampoline(CThunkBase*)</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, .\build\serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEP10CThunkBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CThunk&lang;mbed::SerialBase&rang;::trampoline(CThunkBase*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[6b]"></a>CThunk&lang;mbed::I2C&rang;::trampoline(CThunkBase*)</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, .\build\i2c.o(t._ZN6CThunkIN4mbed3I2CEE10trampolineEP10CThunkBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CThunk&lang;mbed::I2C&rang;::trampoline(CThunkBase*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(i._ZN4mbed3I2CC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[34d]"></a>SingletonPtr&lang;rtos::Mutex&rang;::get() const</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(t._ZNK12SingletonPtrIN4rtos5MutexEE3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SingletonPtr&lang;rtos::Mutex&rang;::get() const &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() const
</UL>

<P><STRONG><a name="[21b]"></a>SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\directaccessdevicekey.o(t._ZNK12SingletonPtrIN4rtos5MutexEEptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() const &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() const &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(const char*) &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get() const
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::unlock()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::lock()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
</UL>

<P><STRONG><a name="[22b]"></a>mbed::Callback&lang;void(int)&rang;::call(int) const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\serialbase.o(t._ZNK4mbed8CallbackIFviEE4callEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::call(int) const &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[22a]"></a>mbed::Callback&lang;void(int)&rang;::operator bool() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\serialbase.o(t._ZNK4mbed8CallbackIFviEEcvbEv))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[227]"></a>mbed::Callback&lang;void()&rang;::operator bool() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\at_cellularsms.o(t._ZNK4mbed8CallbackIFvvEEcvbEv))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[114]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[3dd]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3de]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[f6]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(printf1.o)(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[fa]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(printf2.o)(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6f]"></a>&lang;Func7&rang;</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\arm_hal_fhss_timer.o(i.<Func7>))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = &lang;Func7&rang; &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_fhss_timer.o(i.__sti___22_arm_hal_fhss_timer_cpp_12d6f2f7)
</UL>
<P><STRONG><a name="[e5]"></a>__sti___22_arm_hal_fhss_timer_cpp_12d6f2f7</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\arm_hal_fhss_timer.o(i.__sti___22_arm_hal_fhss_timer_cpp_12d6f2f7))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __sti___22_arm_hal_fhss_timer_cpp_12d6f2f7 &rArr; mbed::Timer::Timer() &rArr; mbed::Timer::reset() &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_fhss_timer.o(.init_array)
</UL>
<P><STRONG><a name="[1a2]"></a>BUS_RegBitRead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\em_cmu.o(i.BUS_RegBitRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningSet
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleWait
</UL>

<P><STRONG><a name="[189]"></a>BUS_RegBitWrite</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, .\build\em_cmu.o(i.BUS_RegBitWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHfLeConfig
</UL>

<P><STRONG><a name="[33e]"></a>BUS_RegMaskedClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\em_cmu.o(i.BUS_RegMaskedClear))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRamWaitState
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBusWaitState
</UL>

<P><STRONG><a name="[33d]"></a>BUS_RegMaskedSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\em_cmu.o(i.BUS_RegMaskedSet))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRamWaitState
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBusWaitState
</UL>

<P><STRONG><a name="[18d]"></a>CMU_Log2ToDiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\em_cmu.o(i.CMU_Log2ToDiv))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfClkGet
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PrescToLog2
</UL>

<P><STRONG><a name="[199]"></a>CMU_PrescToLog2</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.CMU_PrescToLog2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMU_PrescToLog2
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Log2ToDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockPrescSet
</UL>

<P><STRONG><a name="[197]"></a>EMU_VScaleGet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\em_cmu.o(i.EMU_VScaleGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EMU_VScaleGet &rArr; EMU_VScaleWait &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleWait
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockPrescSet
</UL>

<P><STRONG><a name="[19f]"></a>EMU_VScaleWait</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\em_cmu.o(i.EMU_VScaleWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EMU_VScaleWait &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleGet
</UL>

<P><STRONG><a name="[190]"></a>adcAsyncClkGet</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.adcAsyncClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adcAsyncClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockGet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfSrcClkGet
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxClkGet
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[18f]"></a>auxClkGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\em_cmu.o(i.auxClkGet))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdioRefClkGet
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspiRefClkGet
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgClkGet
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcAsyncClkGet
</UL>

<P><STRONG><a name="[18e]"></a>dbgClkGet</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.dbgClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dbgClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxClkGet
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[1a6]"></a>flashWaitStateControl</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.flashWaitStateControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_UpdateWaitStates
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateMax
</UL>

<P><STRONG><a name="[194]"></a>flashWaitStateMax</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\em_cmu.o(i.flashWaitStateMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flashWaitStateMax &rArr; flashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemMaxCoreClockGet
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockPrescSet
</UL>

<P><STRONG><a name="[291]"></a>hfSrcClkGet</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\em_cmu.o(i.hfSrcClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hfSrcClkGet
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcAsyncClkGet
</UL>

<P><STRONG><a name="[18c]"></a>lfClkGet</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, .\build\em_cmu.o(i.lfClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lfClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemULFRCOClockGet
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockGet
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFRCOClockGet
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Log2ToDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[192]"></a>qspiRefClkGet</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.qspiRefClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = qspiRefClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockGet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxClkGet
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[191]"></a>sdioRefClkGet</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.sdioRefClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdioRefClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockGet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxClkGet
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[1a8]"></a>setBusWaitState</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.setBusWaitState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setBusWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegMaskedSet
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegMaskedClear
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_UpdateWaitStates
</UL>

<P><STRONG><a name="[195]"></a>setHfLeConfig</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.setHfLeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setHfLeConfig &rArr; BUS_RegBitWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockPrescSet
</UL>

<P><STRONG><a name="[1a7]"></a>setRamWaitState</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.setRamWaitState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setRamWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegMaskedSet
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegMaskedClear
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_UpdateWaitStates
</UL>

<P><STRONG><a name="[188]"></a>syncReg</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\em_cmu.o(i.syncReg))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockPrescSet
</UL>

<P><STRONG><a name="[193]"></a>usbRateClkGet</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, .\build\em_cmu.o(i.usbRateClkGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbRateClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockGet
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFRCOClockGet
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockGet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[1aa]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\em_core.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_EnterAtomic
</UL>

<P><STRONG><a name="[1b5]"></a>BUS_RegBitRead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\em_emu.o(i.BUS_RegBitRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCLnRcoBandSet
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdcValidatedConfigSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleWait
</UL>

<P><STRONG><a name="[1b3]"></a>BUS_RegBitWrite</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, .\build\em_emu.o(i.BUS_RegBitWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCModeSet
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCInit
</UL>

<P><STRONG><a name="[1b6]"></a>EMU_IntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\em_emu.o(i.EMU_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCModeSet
</UL>

<P><STRONG><a name="[1bb]"></a>EMU_VScaleWait</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\em_emu.o(i.EMU_VScaleWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EMU_VScaleWait &rArr; BUS_RegBitRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleEM01
</UL>

<P><STRONG><a name="[1b0]"></a>compCtrlSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\build\em_emu.o(i.compCtrlSet))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCInit
</UL>

<P><STRONG><a name="[1b7]"></a>currentLimitersUpdate</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, .\build\em_emu.o(i.currentLimitersUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = currentLimitersUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCOptimizeSlice
</UL>

<P><STRONG><a name="[1ac]"></a>dcdcConstCalibrationLoad</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\em_emu.o(i.dcdcConstCalibrationLoad))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCInit
</UL>

<P><STRONG><a name="[1ad]"></a>dcdcValidatedConfigSet</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\em_emu.o(i.dcdcValidatedConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dcdcValidatedConfigSet &rArr; EMU_DCDCLnRcoBandSet &rArr; EMU_DCDCOptimizeSlice &rArr; currentLimitersUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCLnRcoBandSet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCInit
</UL>

<P><STRONG><a name="[1b9]"></a>lpCmpHystCalibrationLoad</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, .\build\em_emu.o(i.lpCmpHystCalibrationLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lpCmpHystCalibrationLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCOutputVoltageSet
</UL>

<P><STRONG><a name="[1b8]"></a>lpGetDevinfoVrefLowHigh</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, .\build\em_emu.o(i.lpGetDevinfoVrefLowHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lpGetDevinfoVrefLowHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCOutputVoltageSet
</UL>

<P><STRONG><a name="[1ae]"></a>userCurrentLimitsSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\em_emu.o(i.userCurrentLimitsSet))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCInit
</UL>

<P><STRONG><a name="[1bc]"></a>vScaleEM01Cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\em_emu.o(i.vScaleEM01Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_VScaleEM01
</UL>

<P><STRONG><a name="[1d0]"></a>BUS_RegMaskedClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\em_gpio.o(i.BUS_RegMaskedClear))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>

<P><STRONG><a name="[1d1]"></a>BUS_RegMaskedSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\em_gpio.o(i.BUS_RegMaskedSet))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutSet
</UL>

<P><STRONG><a name="[1cf]"></a>GPIO_PinOutClear</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\em_gpio.o(i.GPIO_PinOutClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinOutClear
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegMaskedClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>

<P><STRONG><a name="[1ce]"></a>GPIO_PinOutSet</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\em_gpio.o(i.GPIO_PinOutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUS_RegMaskedSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>

<P><STRONG><a name="[1d4]"></a>BUS_RegBitWrite</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, .\build\em_i2c.o(i.BUS_RegBitWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BUS_RegBitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable
</UL>

<P><STRONG><a name="[1db]"></a>BUS_RegMaskedClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\em_ldma.o(i.BUS_RegMaskedClear))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDMA_StopTransfer
</UL>

<P><STRONG><a name="[1e0]"></a>LEUART_Sync</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\em_leuart.o(i.LEUART_Sync))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Enable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
</UL>

<P><STRONG><a name="[1f6]"></a>TIMER_Valid</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, .\build\em_timer.o(i.TIMER_Valid))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitCC
</UL>

<P><STRONG><a name="[2a3]"></a>BUS_RegBitRead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\gpio_api.o(i.BUS_RegBitRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read
</UL>

<P><STRONG><a name="[1c9]"></a>GPIOINT_IRQDispatcher</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\gpio_irq_api.o(i.GPIOINT_IRQDispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOINT_IRQDispatcher &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ODD_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EVEN_IRQHandler
</UL>

<P><STRONG><a name="[1cc]"></a>GPIO_IntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(i.GPIO_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ODD_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EVEN_IRQHandler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>

<P><STRONG><a name="[1cb]"></a>GPIO_IntGetEnabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(i.GPIO_IntGetEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ODD_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EVEN_IRQHandler
</UL>

<P><STRONG><a name="[1ca]"></a>handle_interrupt_in</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, .\build\gpio_irq_api.o(i.handle_interrupt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOINT_IRQDispatcher
</UL>

<P><STRONG><a name="[2aa]"></a>i2c_get_clock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\i2c_api.o(i.i2c_get_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = i2c_get_clock &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[2a9]"></a>i2c_get_index</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\i2c_api.o(i.i2c_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = i2c_get_index &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable_interrupt
</UL>

<P><STRONG><a name="[2d3]"></a>mbed_cpy_nvic</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\mbed_boot.o(i.mbed_cpy_nvic))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
</UL>

<P><STRONG><a name="[282]"></a>os_kernel_is_active</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_boot_arm_std.o(i.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[2a4]"></a>are_interrupts_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_critical_section_api.o(i.are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_enter
</UL>

<P><STRONG><a name="[298]"></a>handle_error</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, .\build\mbed_error.o(i.handle_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = handle_error &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_warning
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[29b]"></a>mbed_halt_system</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, .\build\mbed_error.o(i.mbed_halt_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_flag_test_and_set
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[315]"></a>name_or_unnamed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_error.o(i.name_or_unnamed))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
</UL>

<P><STRONG><a name="[299]"></a>print_error_report</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, .\build\mbed_error.o(i.print_error_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_or_unnamed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[284]"></a>_gpio_init_in</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i._gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _gpio_init_in &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_inout
</UL>

<P><STRONG><a name="[286]"></a>_gpio_init_out</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, .\build\mbed_gpio.o(i._gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _gpio_init_out &rArr; gpio_dir &rArr; gpio_mode &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_inout
</UL>

<P><STRONG><a name="[2d6]"></a>ARM_MPU_SetRegion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_mpu_v7m.o(i.ARM_MPU_SetRegion))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_mpu_init
</UL>

<P><STRONG><a name="[202]"></a>get_console(int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z11get_consolei))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_target_override_console(int)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_override_console(int)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fhc(int)
</UL>

<P><STRONG><a name="[28f]"></a>convert_crlf(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i._Z12convert_crlfi))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[206]"></a>singleton_lock()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._Z14singleton_lockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = singleton_lock() &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get() const
</UL>

<P><STRONG><a name="[208]"></a>unbind_from_fd(int, mbed::FileHandle*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z14unbind_from_fdiPN4mbed10FileHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = unbind_from_fd(int, mbed::FileHandle*) &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osThreadGetId &rArr; svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[205]"></a>default_console()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._Z15default_consolev))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(PinName, PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[20d]"></a>singleton_unlock()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._Z16singleton_unlockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get() const
</UL>

<P><STRONG><a name="[219]"></a>handle_open_errors(int, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z18handle_open_errorsij))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = handle_open_errors(int, unsigned) &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; osThreadGetId &rArr; svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[21a]"></a>reserve_filehandle()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z18reserve_filehandlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = reserve_filehandle() &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator -&rang;() const
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::bind_to_fd(mbed::FileHandle*)
</UL>

<P><STRONG><a name="[21e]"></a>get_fhc(int)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z7get_fhci))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[1c0]"></a>error_msg</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(i.error_msg))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>

<P><STRONG><a name="[1c8]"></a>thread_terminate_hook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(i.thread_terminate_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
</UL>

<P><STRONG><a name="[f]"></a>default_idle_hook()</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, .\build\mbed_rtx_idle.o(i._Z17default_idle_hookv))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = default_idle_hook() &rArr; osKernelSuspend &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSuspend
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelResume
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::suspend(unsigned)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::resume()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::internal::SysTimer::suspend_time_passed()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtx_idle.o(.data)
</UL>
<P><STRONG><a name="[292]"></a>compute_tick_round_up</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, .\build\mbed_ticker_api.o(i.compute_tick_round_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = compute_tick_round_up &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[2b3]"></a>initialize</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, .\build\mbed_ticker_api.o(i.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>

<P><STRONG><a name="[2b5]"></a>schedule_interrupt</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, .\build\mbed_ticker_api.o(i.schedule_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ticker_match_interval_passed
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick_round_up
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[346]"></a>set_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_ticker_api.o(i.set_handler))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>

<P><STRONG><a name="[2b4]"></a>update_present_time</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, .\build\mbed_ticker_api.o(i.update_present_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[316]"></a>BUS_RegBitRead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\rtcc.o(i.BUS_RegBitRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUS_RegBitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[2c7]"></a>RTCC_IntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtcc.o(i.RTCC_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_clear_interrupt
</UL>

<P><STRONG><a name="[2c8]"></a>RTCC_IntDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtcc.o(i.RTCC_IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_disable_interrupt
</UL>

<P><STRONG><a name="[2c9]"></a>RTCC_IntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtcc.o(i.RTCC_IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_fire_interrupt
</UL>

<P><STRONG><a name="[2e1]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\rtx_delay.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[2e0]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_delay.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[75]"></a>svcRtxDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\rtx_delay.o(i.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(i.osDelay)
</UL>
<P><STRONG><a name="[2e4]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSuspend
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelResume
</UL>

<P><STRONG><a name="[2e3]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSuspend
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelResume
</UL>

<P><STRONG><a name="[2e5]"></a>IsPrivileged</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.IsPrivileged))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[1d6]"></a>KernelBlock</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.KernelBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = KernelBlock &rArr; OS_Tick_Disable &rArr; rtos::internal::SysTimer::cancel_tick() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelSuspend
</UL>

<P><STRONG><a name="[1d8]"></a>KernelUnblock</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.KernelUnblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = KernelUnblock &rArr; OS_Tick_Enable &rArr; rtos::internal::SysTimer::SysTimer() &rArr; mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*) &rArr; ticker_set_handler &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
</UL>

<P><STRONG><a name="[76]"></a>svcRtxKernelGetState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(i.svcRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetState)
</UL>
<P><STRONG><a name="[77]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 594 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelInitialize &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[78]"></a>svcRtxKernelResume</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, .\build\rtx_kernel.o(i.svcRtxKernelResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = svcRtxKernelResume &rArr; KernelUnblock &rArr; OS_Tick_Enable &rArr; rtos::internal::SysTimer::SysTimer() &rArr; mbed::TimerEvent::TimerEvent__sub_object(const ticker_data_t*) &rArr; ticker_set_handler &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelUnblock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelResume)
</UL>
<P><STRONG><a name="[79]"></a>svcRtxKernelStart</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(i.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[7a]"></a>svcRtxKernelSuspend</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(i.svcRtxKernelSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelSuspend &rArr; EvrRtxKernelError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelSuspend)
</UL>
<P><STRONG><a name="[2f0]"></a>MemBlockPtr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\rtx_memory.o(i.MemBlockPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[2e9]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[2e8]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[1e5]"></a>MessageQueueGet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_dec32_nz
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[1e8]"></a>MessageQueuePut</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(i.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_ba128ae8__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[2f7]"></a>MessageQueueRemove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(i.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[2b6]"></a>isrRtxMessageQueueGet</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, .\build\rtx_msgqueue.o(i.isrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = isrRtxMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[2b9]"></a>isrRtxMessageQueuePut</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, .\build\rtx_msgqueue.o(i.isrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = isrRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[9d]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, .\build\rtx_msgqueue.o(i.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[7b]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, .\build\rtx_msgqueue.o(i.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueGet)
</UL>
<P><STRONG><a name="[7c]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, .\build\rtx_msgqueue.o(i.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueNew)
</UL>
<P><STRONG><a name="[7d]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, .\build\rtx_msgqueue.o(i.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueuePut)
</UL>
<P><STRONG><a name="[2ed]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[2ec]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[7e]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, .\build\rtx_mutex.o(i.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexAcquire)
</UL>
<P><STRONG><a name="[7f]"></a>svcRtxMutexDelete</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, .\build\rtx_mutex.o(i.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexDelete)
</UL>
<P><STRONG><a name="[80]"></a>svcRtxMutexNew</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(i.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexNew)
</UL>
<P><STRONG><a name="[81]"></a>svcRtxMutexRelease</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, .\build\rtx_mutex.o(i.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[310]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[30f]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[1f1]"></a>SemaphoreTokenDecrement</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.SemaphoreTokenDecrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[9e]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(i.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[85]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, .\build\rtx_semaphore.o(i.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = svcRtxSemaphoreDelete &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[86]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, .\build\rtx_semaphore.o(i.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = svcRtxSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreNew)
</UL>
<P><STRONG><a name="[2bc]"></a>isr_queue_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\rtx_system.o(i.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isr_queue_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[2bf]"></a>isr_queue_put</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, .\build\rtx_system.o(i.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[312]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[311]"></a>IsIrqMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.IsIrqMode))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[1f7]"></a>ThreadFlagsCheck</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, .\build\rtx_thread.o(i.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_any
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[1fa]"></a>ThreadFlagsSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.ThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ThreadFlagsSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_set32
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[2bb]"></a>isrRtxThreadFlagsSet</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, .\build\rtx_thread.o(i.isrRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[300]"></a>osRtxKernelGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[302]"></a>osRtxThreadBlock</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, .\build\rtx_thread.o(i.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[30a]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[30b]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[304]"></a>osRtxThreadFree</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[301]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[a0]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[344]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(i.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[87]"></a>svcRtxThreadExit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, .\build\rtx_thread.o(i.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[88]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, .\build\rtx_thread.o(i.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxThreadFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[89]"></a>svcRtxThreadGetId</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\rtx_thread.o(i.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetId)
</UL>
<P><STRONG><a name="[8a]"></a>svcRtxThreadNew</STRONG> (Thumb, 600 bytes, Stack size 56 bytes, .\build\rtx_thread.o(i.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadSwitch &rArr; osRtxThreadStackCheck &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadNew)
</UL>
<P><STRONG><a name="[30e]"></a>TimerInsert</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, .\build\rtx_timer.o(i.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[30d]"></a>TimerUnlink</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\rtx_timer.o(i.TimerUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[84]"></a>osRtxTimerTick</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\rtx_timer.o(i.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUnlink
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osRtxTimerThread)
</UL>
<P><STRONG><a name="[2c3]"></a>LEUART_IntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\serial_api.o(i.LEUART_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leuart1_irq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leuart0_irq
</UL>

<P><STRONG><a name="[335]"></a>LEUART_IntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial_api.o(i.LEUART_IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
</UL>

<P><STRONG><a name="[33b]"></a>LEUART_IntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial_api.o(i.LEUART_IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
</UL>

<P><STRONG><a name="[2c1]"></a>LEUART_IntGetEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\serial_api.o(i.LEUART_IntGetEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leuart1_irq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leuart0_irq
</UL>

<P><STRONG><a name="[339]"></a>LEUART_RxDataGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial_api.o(i.LEUART_RxDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
</UL>

<P><STRONG><a name="[32b]"></a>LEUART_StatusGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial_api.o(i.LEUART_StatusGet))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[337]"></a>USART_IntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\serial_api.o(i.USART_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_tx_irq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_tx_irq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_tx_irq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_tx_irq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_tx_irq
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_tx_irq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_tx_irq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_tx_irq
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
</UL>

<P><STRONG><a name="[336]"></a>USART_IntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial_api.o(i.USART_IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
</UL>

<P><STRONG><a name="[33c]"></a>USART_IntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial_api.o(i.USART_IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
</UL>

<P><STRONG><a name="[327]"></a>USART_IntGetEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\serial_api.o(i.USART_IntGetEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[33a]"></a>USART_RxDataGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\serial_api.o(i.USART_RxDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
</UL>

<P><STRONG><a name="[32d]"></a>USART_StatusGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial_api.o(i.USART_StatusGet))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[32e]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\serial_api.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[331]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, .\build\serial_api.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[32f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\serial_api.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[330]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\serial_api.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[332]"></a>__NVIC_SetVector</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\serial_api.o(i.__NVIC_SetVector))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_preinit
</UL>

<P><STRONG><a name="[9b]"></a>leuart0_irq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\serial_api.o(i.leuart0_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = leuart0_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntGetEnabled
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntClear
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[9c]"></a>leuart1_irq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\serial_api.o(i.leuart1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = leuart1_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntGetEnabled
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntClear
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[31c]"></a>serial_enable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serial_enable &rArr; LEUART_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Enable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[31f]"></a>serial_enable_pins</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, .\build\serial_api.o(i.serial_enable_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = serial_enable_pins &rArr; pin_mode &rArr; GPIO_PinModeSet &rArr; GPIO_PinOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[324]"></a>serial_get_clock</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, .\build\serial_api.o(i.serial_get_clock))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_leuart_baud
</UL>

<P><STRONG><a name="[31e]"></a>serial_get_index</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.serial_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_get_index
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_pointer_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_enable
</UL>

<P><STRONG><a name="[321]"></a>serial_get_rx_irq_index</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, .\build\serial_api.o(i.serial_get_rx_irq_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serial_get_rx_irq_index &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[322]"></a>serial_get_tx_irq_index</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, .\build\serial_api.o(i.serial_get_tx_irq_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serial_get_tx_irq_index &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[31b]"></a>serial_leuart_baud</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, .\build\serial_api.o(i.serial_leuart_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = serial_leuart_baud &rArr; CMU_ClockSelectSet &rArr; EMU_VScaleEM01ByClock &rArr; EMU_VScaleEM01 &rArr; CMU_UpdateWaitStates &rArr; setRamWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[320]"></a>serial_pointer_get_index</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, .\build\serial_api.o(i.serial_pointer_get_index))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_index
</UL>

<P><STRONG><a name="[328]"></a>serial_rx_abort_asynch_intern</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_rx_abort_asynch_intern))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = serial_rx_abort_asynch_intern &rArr; serial_unblock_sleep &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDMA_StopTransfer
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntDisable
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntDisable
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntClear
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_unblock_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_irq_handler_asynch
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[326]"></a>serial_set_route</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, .\build\serial_api.o(i.serial_set_route))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[329]"></a>serial_tx_abort_asynch_intern</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, .\build\serial_api.o(i.serial_tx_abort_asynch_intern))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = serial_tx_abort_asynch_intern &rArr; serial_unblock_sleep &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDMA_StopTransfer
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntDisable
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntDisable
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_IntClear
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_unblock_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_irq_handler_asynch
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[338]"></a>serial_unblock_sleep</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\serial_api.o(i.serial_unblock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = serial_unblock_sleep &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateGet
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx_abort_asynch_intern
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch_intern
</UL>

<P><STRONG><a name="[8b]"></a>uart0_rx_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.uart0_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart0_rx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[8c]"></a>uart0_tx_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.uart0_tx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart0_tx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[8d]"></a>uart1_rx_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.uart1_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart1_rx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[8e]"></a>uart1_tx_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.uart1_tx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart1_tx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[325]"></a>uart_init</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, .\build\serial_api.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uart_init &rArr; serial_baud &rArr; serial_leuart_baud &rArr; CMU_ClockSelectSet &rArr; EMU_VScaleEM01ByClock &rArr; EMU_VScaleEM01 &rArr; CMU_UpdateWaitStates &rArr; setRamWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[2c2]"></a>uart_irq</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\serial_api.o(i.uart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_pointer_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_tx_irq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart5_rx_irq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_tx_irq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_rx_irq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_tx_irq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_rx_irq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_tx_irq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_rx_irq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_tx_irq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_rx_irq
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_tx_irq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart0_rx_irq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_tx_irq
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_rx_irq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_tx_irq
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_rx_irq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leuart1_irq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leuart0_irq
</UL>

<P><STRONG><a name="[8f]"></a>usart0_rx_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart0_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart0_rx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[90]"></a>usart0_tx_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart0_tx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart0_tx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[91]"></a>usart1_rx_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart1_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart1_rx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[92]"></a>usart1_tx_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart1_tx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart1_tx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[93]"></a>usart2_rx_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart2_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart2_rx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[94]"></a>usart2_tx_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart2_tx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart2_tx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[95]"></a>usart3_rx_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart3_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart3_rx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[96]"></a>usart3_tx_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart3_tx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart3_tx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[97]"></a>usart4_rx_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart4_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart4_rx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[98]"></a>usart4_tx_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart4_tx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart4_tx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[99]"></a>usart5_rx_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart5_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart5_rx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[9a]"></a>usart5_tx_irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\serial_api.o(i.usart5_tx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart5_tx_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntClear
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_preinit)
</UL>
<P><STRONG><a name="[67]"></a>&lang;Func4&rang;</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serialbase.o(i.<Func4>))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = &lang;Func4&rang; &rArr; mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[e6]"></a>__sti___7_SPI_cpp_ab1f1164</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___7_SPI_cpp_ab1f1164 &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.init_array)
</UL>
<P><STRONG><a name="[34a]"></a>TIMER_Enable</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.TIMER_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_free
</UL>

<P><STRONG><a name="[348]"></a>TIMER_IntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.TIMER_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_clear_interrupt
</UL>

<P><STRONG><a name="[349]"></a>TIMER_IntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.TIMER_IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
</UL>

<P><STRONG><a name="[34b]"></a>TIMER_MaxCount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\us_ticker.o(i.TIMER_MaxCount))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[e7]"></a>__sti___8_main_cpp_pc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\build\main.o(i.__sti___8_main_cpp_pc))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp_pc &rArr; mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; fdopen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[12c]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_alloc_mt.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[151]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_puts &rArr; write &rArr; get_fhc(int) &rArr; get_console(int) &rArr; default_console() &rArr; DirectSerial::DirectSerial(PinName, PinName, int) &rArr; serial_init &rArr; serial_preinit &rArr; pin_location &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[15e]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[62]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
